### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Объект ответа мутации пользователя
"""
type AuthPayload {
  data: User
  errors: [RequestError!]!
  message: String
  success: Boolean!
  token: String
}

input BlockListRelationFilter {
  every: BlockWhereInput
  none: BlockWhereInput
  some: BlockWhereInput
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  World: WorldWhereInput
  id: StringFilter
  representation: StringFilter
  type: IntFilter
  world: StringNullableFilter
  x: IntFilter
  y: IntFilter
  z: IntFilter
}

input BlogCreateInput {
  content: JSON
  name: String! = ""
}

input BlogUpdateInput {
  content: JSON
  name: String! = ""
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input CallRequestListRelationFilter {
  every: CallRequestWhereInput
  none: CallRequestWhereInput
  some: CallRequestWhereInput
}

enum CallRequestStatus {
  Accepted
  Billed
  Canceled
  Created
  Ended
  Error
  Missed
  Rejected
  Started
}

input CallRequestWhereInput {
  AND: [CallRequestWhereInput!]
  Called: StringNullableFilter
  Caller: StringNullableFilter
  ChatRoom: ChatRoomWhereInput
  NOT: [CallRequestWhereInput!]
  OR: [CallRequestWhereInput!]
  Room: StringNullableFilter
  User_CallRequest_CalledToUser: UserWhereInput
  User_CallRequest_CallerToUser: UserWhereInput
  createdAt: DateTimeFilter
  endedAt: DateTimeNullableFilter
  id: StringFilter
  startedAt: DateTimeNullableFilter
  status: EnumCallRequestStatusFilter
  updatedAt: DateTimeFilter
}

input CareerListRelationFilter {
  every: CareerWhereInput
  none: CareerWhereInput
  some: CareerWhereInput
}

input CareerWhereInput {
  AND: [CareerWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [CareerWhereInput!]
  OR: [CareerWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  start_date: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

type ChatMessage {
  CreatedBy: User
  Room: ChatRoom
  content: JSON
  contentText: String
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input ChatMessageCreateInput {
  Room: ChatRoomCreateOneWithoutMessagesInput
  content: JSON
}

input ChatMessageListRelationFilter {
  every: ChatMessageWhereInput
  none: ChatMessageWhereInput
  some: ChatMessageWhereInput
}

input ChatMessageOrderByInput {
  CreatedBy: SortOrder
  Room: SortOrder
  content: SortOrder
  contentText: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ChatMessageReadedListRelationFilter {
  every: ChatMessageReadedWhereInput
  none: ChatMessageReadedWhereInput
  some: ChatMessageReadedWhereInput
}

input ChatMessageReadedWhereInput {
  AND: [ChatMessageReadedWhereInput!]
  ChatMessage: ChatMessageWhereInput
  Message: StringNullableFilter
  NOT: [ChatMessageReadedWhereInput!]
  OR: [ChatMessageReadedWhereInput!]
  User: StringNullableFilter
  User_ChatMessageReadedToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

type ChatMessageResponse {
  data: ChatMessage
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input ChatMessageWhereInput {
  AND: [ChatMessageWhereInput!]
  ChatMessagesReaded: ChatMessageReadedListRelationFilter
  ChatRoom: ChatRoomWhereInput
  CreatedBy: StringNullableFilter
  NOT: [ChatMessageWhereInput!]
  Notices: NoticeListRelationFilter
  OR: [ChatMessageWhereInput!]
  Room: StringNullableFilter
  User: UserWhereInput
  content: JsonNullableFilter
  contentText: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input ChatMessageWhereUniqueInput {
  id: String
}

type ChatRoom {
  CreatedBy: User
  Invitations: [ChatRoomInvitation!]
  Members: [User!]
  Messages: [ChatMessage!]
  code: ID
  createdAt: DateTime!
  description: String
  id: ID!
  image: String
  isPublic: Boolean
  name: String!
  updatedAt: DateTime!
}

input ChatRoomCreateOneWithoutMessagesInput {
  connect: ChatRoomWhereUniqueInput
  to: ID
}

type ChatRoomInvitation {
  ChatRoom: ChatRoom
  CreatedBy: User
  User: User
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input ChatRoomInvitationListRelationFilter {
  every: ChatRoomInvitationWhereInput
  none: ChatRoomInvitationWhereInput
  some: ChatRoomInvitationWhereInput
}

input ChatRoomInvitationWhereInput {
  AND: [ChatRoomInvitationWhereInput!]
  ChatRoom: StringNullableFilter
  ChatRoom_ChatRoomToChatRoomInvitation: ChatRoomWhereInput
  CreatedBy: StringNullableFilter
  NOT: [ChatRoomInvitationWhereInput!]
  Notice: StringNullableFilter
  Notice_ChatRoomInvitationToNotice: NoticeWhereInput
  OR: [ChatRoomInvitationWhereInput!]
  User: StringNullableFilter
  User_ChatRoomInvitation_CreatedByToUser: UserWhereInput
  User_ChatRoomInvitation_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input ChatRoomListRelationFilter {
  every: ChatRoomWhereInput
  none: ChatRoomWhereInput
  some: ChatRoomWhereInput
}

input ChatRoomOrderByInput {
  CreatedBy: SortOrder
  allowAnonymous: SortOrder
  code: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: SortOrder
  isPublic: SortOrder
  name: SortOrder
  sandbox: SortOrder
  updatedAt: SortOrder
}

input ChatRoomWhereInput {
  AND: [ChatRoomWhereInput!]
  CallRequests: CallRequestListRelationFilter
  ChatMessages: ChatMessageListRelationFilter
  ChatRoomInvitations: ChatRoomInvitationListRelationFilter
  CreatedBy: StringNullableFilter
  NOT: [ChatRoomWhereInput!]
  OR: [ChatRoomWhereInput!]
  Projects: ProjectListRelationFilter
  Tasks: TaskListRelationFilter
  User_ChatRoomToUser: UserWhereInput
  User_ChatRoomsMembers: UserListRelationFilter
  allowAnonymous: BoolNullableFilter
  code: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isPublic: BoolNullableFilter
  name: StringFilter
  sandbox: BoolNullableFilter
  updatedAt: DateTimeFilter
}

input ChatRoomWhereUniqueInput {
  code: String
  id: String
}

type CodeChallenge {
  Block: CodeChallengeBlock
  CodeChallengeCompletions(
    orderBy: [CodeChallengeCompletionOrderByInput!]
    skip: Int
    take: Int
    where: CodeChallengeCompletionWhereInput
  ): [CodeChallengeCompletion!]
  CreatedBy: User
  Topic: Resource
  challengeOrder: Int
  challengeType: Int
  createdAt: DateTime!
  dashedName: String
  description: String
  externalKey: ID
  files: JSON
  forumTopicId: Int
  id: ID!
  instructions: String
  isBeta: Boolean
  isPrivate: Boolean
  isRequired: Boolean
  localeTitle: String
  name: String
  order: Int
  rank: Int
  required: JSON
  solutions: JSON
  superOrder: Int
  template: String
  tests: JSON
  time: String
  translations: JSON
  updatedAt: DateTime!
  videoUrl: String
}

type CodeChallengeBlock {
  Challenges(orderBy: CodeChallengeOrderByInput): [CodeChallenge!]
  Children(orderBy: CodeChallengeBlockOrderByInput): [CodeChallengeBlock!]
  Parent: CodeChallengeBlock
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
}

input CodeChallengeBlockListRelationFilter {
  every: CodeChallengeBlockWhereInput
  none: CodeChallengeBlockWhereInput
  some: CodeChallengeBlockWhereInput
}

input CodeChallengeBlockOrderByInput {
  CreatedBy: SortOrder
  Parent: SortOrder
  createdAt: SortOrder
  externalKey: SortOrder
  id: SortOrder
  name: SortOrder
  rank: SortOrder
  updatedAt: SortOrder
}

input CodeChallengeBlockWhereInput {
  AND: [CodeChallengeBlockWhereInput!]
  CodeChallenge: CodeChallengeListRelationFilter
  CodeChallengeBlock: CodeChallengeBlockWhereInput
  CreatedBy: StringNullableFilter
  NOT: [CodeChallengeBlockWhereInput!]
  OR: [CodeChallengeBlockWhereInput!]
  Parent: StringNullableFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  externalKey: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  other_CodeChallengeBlock: CodeChallengeBlockListRelationFilter
  rank: IntNullableFilter
  updatedAt: DateTimeFilter
}

input CodeChallengeBlockWhereUniqueInput {
  id: String
}

type CodeChallengeCompletion {
  CodeChallenge: CodeChallenge
  CreatedBy: User
  Task: Task
  content: String
  createdAt: DateTime!
  id: ID!
  success: Boolean
  updatedAt: DateTime!
}

input CodeChallengeCompletionCreateInput {
  CodeChallenge: CodeChallengeCreateOneWithoutCompletionsInput!
}

input CodeChallengeCompletionListRelationFilter {
  every: CodeChallengeCompletionWhereInput
  none: CodeChallengeCompletionWhereInput
  some: CodeChallengeCompletionWhereInput
}

input CodeChallengeCompletionOrderByInput {
  CodeChallenge: SortOrder
  CreatedBy: SortOrder
  Task: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  success: SortOrder
  updatedAt: SortOrder
}

type CodeChallengeCompletionResponse {
  data: CodeChallengeCompletion
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input CodeChallengeCompletionUpdateInput {
  content: String
  success: Boolean
}

input CodeChallengeCompletionWhereInput {
  AND: [CodeChallengeCompletionWhereInput!]
  CodeChallenge: StringNullableFilter
  CodeChallenge_CodeChallengeToCodeChallengeCompletion: CodeChallengeWhereInput
  CreatedBy: StringNullableFilter
  NOT: [CodeChallengeCompletionWhereInput!]
  OR: [CodeChallengeCompletionWhereInput!]
  Task: StringNullableFilter
  Task_CodeChallengeCompletionToTask: TaskWhereInput
  User: UserWhereInput
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  success: BoolNullableFilter
  updatedAt: DateTimeFilter
}

input CodeChallengeCompletionWhereUniqueInput {
  id: String
}

input CodeChallengeCreateOneWithoutCompletionsInput {
  connect: CodeChallengeWhereUniqueInput
}

input CodeChallengeCreateOneWithoutTopicInput {
  connect: CodeChallengeWhereUniqueInput
}

input CodeChallengeListRelationFilter {
  every: CodeChallengeWhereInput
  none: CodeChallengeWhereInput
  some: CodeChallengeWhereInput
}

input CodeChallengeOrderByInput {
  Block: SortOrder
  CreatedBy: SortOrder
  Topic: SortOrder
  challengeOrder: SortOrder
  challengeType: SortOrder
  createdAt: SortOrder
  dashedName: SortOrder
  description: SortOrder
  externalKey: SortOrder
  files: SortOrder
  forumTopicId: SortOrder
  id: SortOrder
  instructions: SortOrder
  isBeta: SortOrder
  isPrivate: SortOrder
  isRequired: SortOrder
  localeTitle: SortOrder
  name: SortOrder
  order: SortOrder
  rank: SortOrder
  required: SortOrder
  solutions: SortOrder
  superOrder: SortOrder
  template: SortOrder
  tests: SortOrder
  time: SortOrder
  translations: SortOrder
  updatedAt: SortOrder
  videoUrl: SortOrder
}

input CodeChallengeUpdateInput {
  description: String
  instructions: String
  localeTitle: String
}

input CodeChallengeWhereInput {
  AND: [CodeChallengeWhereInput!]
  Block: StringNullableFilter
  CodeChallengeBlock: CodeChallengeBlockWhereInput
  CodeChallengeCompletions: CodeChallengeCompletionListRelationFilter
  CreatedBy: StringNullableFilter
  NOT: [CodeChallengeWhereInput!]
  OR: [CodeChallengeWhereInput!]
  Resource: ResourceWhereInput
  Topic: StringNullableFilter
  User: UserWhereInput
  challengeOrder: IntNullableFilter
  challengeType: IntNullableFilter
  createdAt: DateTimeFilter
  dashedName: StringNullableFilter
  description: StringNullableFilter
  externalKey: StringNullableFilter
  files: JsonNullableFilter
  forumTopicId: IntNullableFilter
  id: StringFilter
  instructions: StringNullableFilter
  isBeta: BoolNullableFilter
  isPrivate: BoolNullableFilter
  isRequired: BoolNullableFilter
  localeTitle: StringNullableFilter
  name: StringNullableFilter
  order: IntNullableFilter
  rank: IntNullableFilter
  required: JsonNullableFilter
  solutions: JsonNullableFilter
  superOrder: IntNullableFilter
  template: StringNullableFilter
  tests: JsonNullableFilter
  time: StringNullableFilter
  translations: JsonNullableFilter
  updatedAt: DateTimeFilter
  videoUrl: StringNullableFilter
}

input CodeChallengeWhereUniqueInput {
  externalKey: String
  id: String
}

input CommentCreateInput {
  Task: TaskCreateOneWithoutCommentsInput
  components: JSON
  content: JSON
  topicID: ID
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentUpdateInput {
  components: JSON
  content: JSON
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  TechnologyLesson: StringNullableFilter
  TechnologyLesson_CommentToTechnologyLesson: TechnologyLessonWhereInput
  User: UserWhereInput
  components: StringNullableFilter
  contentText: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

"""
Контент для фронт-редактора
"""
scalar EditorComponentObject

input EnumCallRequestStatusFilter {
  equals: CallRequestStatus
  in: [CallRequestStatus!]
  not: NestedEnumCallRequestStatusFilter
  notIn: [CallRequestStatus!]
}

input EnumEthAccountTypeFilter {
  equals: EthAccountType
  in: [EthAccountType!]
  not: NestedEnumEthAccountTypeFilter
  notIn: [EthAccountType!]
}

input EnumEthTransactionTypeNullableFilter {
  equals: EthTransactionType
  in: [EthTransactionType!]
  not: NestedEnumEthTransactionTypeNullableFilter
  notIn: [EthTransactionType!]
}

input EnumGamemodeFilter {
  equals: Gamemode
  in: [Gamemode!]
  not: NestedEnumGamemodeFilter
  notIn: [Gamemode!]
}

input EnumImportStatusFilter {
  equals: ImportStatus
  in: [ImportStatus!]
  not: NestedEnumImportStatusFilter
  notIn: [ImportStatus!]
}

input EnumLetsadsSmsMessageStatusEnumNullableFilter {
  equals: LetsadsSmsMessageStatusEnum
  in: [LetsadsSmsMessageStatusEnum!]
  not: NestedEnumLetsadsSmsMessageStatusEnumNullableFilter
  notIn: [LetsadsSmsMessageStatusEnum!]
}

input EnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter {
  equals: LetsadsSmsMessageStatusErrorCodeEnum
  in: [LetsadsSmsMessageStatusErrorCodeEnum!]
  not: NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter
  notIn: [LetsadsSmsMessageStatusErrorCodeEnum!]
}

input EnumLetterStatusFilter {
  equals: LetterStatus
  in: [LetterStatus!]
  not: NestedEnumLetterStatusFilter
  notIn: [LetterStatus!]
}

input EnumLogLevelFilter {
  equals: LogLevel
  in: [LogLevel!]
  not: NestedEnumLogLevelFilter
  notIn: [LogLevel!]
}

input EnumMentorMenteeStatusFilter {
  equals: MentorMenteeStatus
  in: [MentorMenteeStatus!]
  not: NestedEnumMentorMenteeStatusFilter
  notIn: [MentorMenteeStatus!]
}

input EnumMessageTypeFilter {
  equals: MessageType
  in: [MessageType!]
  not: NestedEnumMessageTypeFilter
  notIn: [MessageType!]
}

input EnumNoticeTypeFilter {
  equals: NoticeType
  in: [NoticeType!]
  not: NestedEnumNoticeTypeFilter
  notIn: [NoticeType!]
}

input EnumProjectMemberStatusFilter {
  equals: ProjectMemberStatus
  in: [ProjectMemberStatus!]
  not: NestedEnumProjectMemberStatusFilter
  notIn: [ProjectMemberStatus!]
}

input EnumProjectStatusNullableFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusNullableFilter
  notIn: [ProjectStatus!]
}

input EnumProjectTypeNullableFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeNullableFilter
  notIn: [ProjectType!]
}

input EnumResourceTypeFilter {
  equals: ResourceType
  in: [ResourceType!]
  not: NestedEnumResourceTypeFilter
  notIn: [ResourceType!]
}

input EnumTagStatusFilter {
  equals: TagStatus
  in: [TagStatus!]
  not: NestedEnumTagStatusFilter
  notIn: [TagStatus!]
}

input EnumTaskMemberStatusFilter {
  equals: TaskMemberStatus
  in: [TaskMemberStatus!]
  not: NestedEnumTaskMemberStatusFilter
  notIn: [TaskMemberStatus!]
}

input EnumTaskReactionTypeFilter {
  equals: TaskReactionType
  in: [TaskReactionType!]
  not: NestedEnumTaskReactionTypeFilter
  notIn: [TaskReactionType!]
}

input EnumTaskStatusFilter {
  equals: TaskStatus
  in: [TaskStatus!]
  not: NestedEnumTaskStatusFilter
  notIn: [TaskStatus!]
}

input EnumTeamMemberStatusFilter {
  equals: TeamMemberStatus
  in: [TeamMemberStatus!]
  not: NestedEnumTeamMemberStatusFilter
  notIn: [TeamMemberStatus!]
}

input EnumTeamStatusFilter {
  equals: TeamStatus
  in: [TeamStatus!]
  not: NestedEnumTeamStatusFilter
  notIn: [TeamStatus!]
}

input EnumTechnologyLessonUserStatusFilter {
  equals: TechnologyLessonUserStatus
  in: [TechnologyLessonUserStatus!]
  not: NestedEnumTechnologyLessonUserStatusFilter
  notIn: [TechnologyLessonUserStatus!]
}

input EnumUserTechnologyHiringStatusNullableFilter {
  equals: UserTechnologyHiringStatus
  in: [UserTechnologyHiringStatus!]
  not: NestedEnumUserTechnologyHiringStatusNullableFilter
  notIn: [UserTechnologyHiringStatus!]
}

input EnumUserTechnologyStatusNullableFilter {
  equals: UserTechnologyStatus
  in: [UserTechnologyStatus!]
  not: NestedEnumUserTechnologyStatusNullableFilter
  notIn: [UserTechnologyStatus!]
}

input EnumWorldTypeFilter {
  equals: WorldType
  in: [WorldType!]
  not: NestedEnumWorldTypeFilter
  notIn: [WorldType!]
}

type EthAccount {
  abi: JSON
  address: String!
  balance(convert: EthAmountConvert): Float
  bytecode: String
  createdAt: DateTime!
  description: JSON
  id: ID!
  name: String
  source: String
  type: EthAccountType
  updatedAt: DateTime!
}

input EthAccountListRelationFilter {
  every: EthAccountWhereInput
  none: EthAccountWhereInput
  some: EthAccountWhereInput
}

enum EthAccountType {
  Account
  Contract
}

input EthAccountWhereInput {
  AND: [EthAccountWhereInput!]
  ContractSource: StringNullableFilter
  CreatedBy: StringNullableFilter
  EthBlock: EthBlockListRelationFilter
  EthContractSource: EthContractSourceWhereInput
  EthTransaction_EthAccountToEthTransaction_Account: EthTransactionListRelationFilter
  EthTransaction_EthAccountToEthTransaction_Receiver: EthTransactionListRelationFilter
  EthTransaction_EthAccountToEthTransaction_Sender: EthTransactionListRelationFilter
  NOT: [EthAccountWhereInput!]
  OR: [EthAccountWhereInput!]
  Project: StringNullableFilter
  Project_EthAccountToProject: ProjectWhereInput
  Resource: ResourceListRelationFilter
  User_EthAccountToUser_EthAccountAuthed: UserListRelationFilter
  User_EthAccount_CreatedByToUser: UserWhereInput
  abi: JsonNullableFilter
  address: StringFilter
  bytecode: StringNullableFilter
  createdAt: DateTimeFilter
  description: JsonNullableFilter
  id: StringFilter
  name: StringNullableFilter
  source: StringNullableFilter
  type: EnumEthAccountTypeFilter
  updatedAt: DateTimeFilter
}

enum EthAmountConvert {
  Gwei
  Kwei
  Mwei
  ether
  gether
  kether
  mether
  nano
  tether
  wei
}

input EthBlockListRelationFilter {
  every: EthBlockWhereInput
  none: EthBlockWhereInput
  some: EthBlockWhereInput
}

input EthBlockWhereInput {
  AND: [EthBlockWhereInput!]
  EthAccount: EthAccountWhereInput
  EthBlock_A: EthBlockListRelationFilter
  EthBlock_B: EthBlockListRelationFilter
  EthTransaction: EthTransactionListRelationFilter
  Miner: StringNullableFilter
  NOT: [EthBlockWhereInput!]
  OR: [EthBlockWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  difficulty: DecimalNullableFilter
  extraData: StringNullableFilter
  gasLimit: DecimalNullableFilter
  gasUsed: DecimalNullableFilter
  hash: StringFilter
  id: StringFilter
  mixHash: StringNullableFilter
  nonce: StringNullableFilter
  number: IntFilter
  parentHash: StringNullableFilter
  receiptsRoot: StringNullableFilter
  sha3Uncles: StringNullableFilter
  size: IntNullableFilter
  stateRoot: StringNullableFilter
  totalDifficulty: DecimalNullableFilter
  transactionsRoot: StringNullableFilter
  transactions_count: IntNullableFilter
  updatedAt: DateTimeFilter
}

input EthContractSourceListRelationFilter {
  every: EthContractSourceWhereInput
  none: EthContractSourceWhereInput
  some: EthContractSourceWhereInput
}

input EthContractSourceWhereInput {
  AND: [EthContractSourceWhereInput!]
  CreatedBy: StringNullableFilter
  EthAccount: EthAccountListRelationFilter
  NOT: [EthContractSourceWhereInput!]
  OR: [EthContractSourceWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  description: JsonNullableFilter
  id: StringFilter
  name: StringFilter
  source: StringNullableFilter
  updatedAt: DateTimeFilter
}

input EthTransactionListRelationFilter {
  every: EthTransactionWhereInput
  none: EthTransactionWhereInput
  some: EthTransactionWhereInput
}

enum EthTransactionType {
  ContractCall
  ContractCreate
  ContractRead
  SendEth
  SendToken
}

input EthTransactionWhereInput {
  AND: [EthTransactionWhereInput!]
  Account: StringNullableFilter
  Block: StringNullableFilter
  EthAccount_EthAccountToEthTransaction_Account: EthAccountWhereInput
  EthAccount_EthAccountToEthTransaction_Receiver: EthAccountWhereInput
  EthAccount_EthAccountToEthTransaction_Sender: EthAccountWhereInput
  EthBlock: EthBlockWhereInput
  NOT: [EthTransactionWhereInput!]
  OR: [EthTransactionWhereInput!]
  Receiver: StringNullableFilter
  Sender: StringNullableFilter
  address: StringFilter
  amount: DecimalNullableFilter
  chainId: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  index: IntNullableFilter
  input: StringNullableFilter
  r: StringNullableFilter
  s: StringNullableFilter
  type: EnumEthTransactionTypeNullableFilter
  updatedAt: DateTimeFilter
  v: StringNullableFilter
}

"""
Файл
"""
type File {
  """
  Когда создан
  """
  createdAt: DateTime!

  """
  Кодировка
  """
  encoding: String!

  """
  Имя файла
  """
  filename: String
  id: String!

  """
  Миме-тип
  """
  mimetype: String!

  """
  Пользовательское имя файла
  """
  name: String

  """
  Путь к файлу
  """
  path: String!

  """
  Очередность
  """
  rank: Int

  """
  Размер в байтах
  """
  size: Float

  """
  Когда обновлен
  """
  updatedAt: DateTime!
}

input FileListRelationFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

input FileOrderByInput {
  CreatedBy: SortOrder
  Gallery: SortOrder
  ImageResource: SortOrder
  createdAt: SortOrder
  encoding: SortOrder
  filename: SortOrder
  hash: SortOrder
  id: SortOrder
  mimetype: SortOrder
  name: SortOrder
  path: SortOrder
  rank: SortOrder
  size: SortOrder
  updatedAt: SortOrder
}

input FileWhereInput {
  AND: [FileWhereInput!]
  CreatedBy: StringNullableFilter
  Gallery: StringNullableFilter
  Gallery_FileToGallery: GalleryWhereInput
  ImageResource: StringNullableFilter
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  Projects: ProjectListRelationFilter
  Resource: ResourceWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  encoding: StringFilter
  filename: StringNullableFilter
  hash: StringNullableFilter
  id: StringFilter
  mimetype: StringFilter
  name: StringNullableFilter
  path: StringFilter
  rank: IntNullableFilter
  size: DecimalNullableFilter
  updatedAt: DateTimeFilter
}

input FileWhereUniqueInput {
  id: String
}

input GalleryListRelationFilter {
  every: GalleryWhereInput
  none: GalleryWhereInput
  some: GalleryWhereInput
}

input GalleryWhereInput {
  AND: [GalleryWhereInput!]
  CreatedBy: StringFilter
  Files: FileListRelationFilter
  NOT: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  Resource: StringNullableFilter
  Resource_GalleryToResource: ResourceWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input GameListRelationFilter {
  every: GameWhereInput
  none: GameWhereInput
  some: GameWhereInput
}

input GameResultListRelationFilter {
  every: GameResultWhereInput
  none: GameResultWhereInput
  some: GameResultWhereInput
}

input GameResultWhereInput {
  AND: [GameResultWhereInput!]
  CreatedBy: StringNullableFilter
  Game: StringNullableFilter
  Game_GameToGameResult: GameWhereInput
  NOT: [GameResultWhereInput!]
  OR: [GameResultWhereInput!]
  Team: StringNullableFilter
  Team_GameResultToTeam: TeamWhereInput
  User: StringNullableFilter
  User_GameResult_CreatedByToUser: UserWhereInput
  User_GameResult_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
  value: DecimalNullableFilter
}

input GameWhereInput {
  AND: [GameWhereInput!]
  CreatedBy: StringNullableFilter
  Game: GameWhereInput
  GameResult: GameResultListRelationFilter
  NOT: [GameWhereInput!]
  OR: [GameWhereInput!]
  Parent: StringNullableFilter
  Team: TeamListRelationFilter
  Tourney: StringNullableFilter
  Tourney_GameToTourney: TourneyWhereInput
  User_GameToUser: UserWhereInput
  User_GameUsers: UserListRelationFilter
  createdAt: DateTimeFilter
  end_date: DateTimeNullableFilter
  id: StringFilter
  name: StringNullableFilter
  other_Game: GameListRelationFilter
  sequence: IntNullableFilter
  start_date: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

enum Gamemode {
  ADVENTURE
  CREATIVE
  SPECTATOR
  SURVIVAL
}

input ImportListRelationFilter {
  every: ImportWhereInput
  none: ImportWhereInput
  some: ImportWhereInput
}

enum ImportStatus {
  Completed
  Created
  Error
  Started
  Stoped
}

input ImportWhereInput {
  AND: [ImportWhereInput!]
  CreatedBy: StringNullableFilter
  Log: LogListRelationFilter
  NOT: [ImportWhereInput!]
  OR: [ImportWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  status: EnumImportStatusFilter
  updatedAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input InventoryWhereInput {
  AND: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  Player: PlayerListRelationFilter
  cursor: IntFilter
  data: StringFilter
  id: StringFilter
}

scalar JSON

scalar Json

input JsonNullableFilter {
  equals: Json
  not: Json
}

type LearnStrategy {
  CreatedBy: User
  LearnStrategyStages: [LearnStrategyStage!]
  UserLearnStrategies: [UserLearnStrategy!]
  createdAt: DateTime!
  createdById: String!
  description: String
  id: ID!
  level: UserTechnologyLevel!
  name: String!
  updatedAt: DateTime!
}

input LearnStrategyCreateInput {
  description: String
  level: UserTechnologyLevel!
  name: String!
}

input LearnStrategyListRelationFilter {
  every: LearnStrategyWhereInput
  none: LearnStrategyWhereInput
  some: LearnStrategyWhereInput
}

input LearnStrategyOrderByInput {
  createdAt: SortOrder
  createdById: SortOrder
  description: SortOrder
  id: SortOrder
  level: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type LearnStrategyStage {
  LearnStrategy: LearnStrategy
  LearnStrategyTarget: LearnStrategy
  Technology: Technology
  createdAt: DateTime!
  id: ID!
  learnStrategyId: String!
  learnStrategyTargetId: String

  """
  Если цель освоить технологию, то до какого уровня
  """
  level: Int
  technologyId: String
  updatedAt: DateTime!
}

"""
Этапом развития может быть или технология, или другая стратегия развития
"""
input LearnStrategyStageCreateInput {
  """
  Стратегия развития, для которой создается этап
  """
  LearnStrategy: LearnStrategyStageCreateLearnStrategyInput!

  """
  Стратегия развития
  """
  LearnStrategyTarget: LearnStrategyStageCreateLearnStrategyInput

  """
  Технология
  """
  TechnologyTarget: LearnStrategyStageCreateTechnologyInput
}

"""
Стратегия развития
"""
input LearnStrategyStageCreateLearnStrategyInput {
  id: ID!
}

"""
Технология
"""
input LearnStrategyStageCreateTechnologyInput {
  id: ID!
  level: UserTechnologyLevel!
}

input LearnStrategyStageListRelationFilter {
  every: LearnStrategyStageWhereInput
  none: LearnStrategyStageWhereInput
  some: LearnStrategyStageWhereInput
}

input LearnStrategyStageOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  learnStrategyId: SortOrder
  learnStrategyTargetId: SortOrder
  level: SortOrder
  technologyId: SortOrder
  updatedAt: SortOrder
}

input LearnStrategyStageWhereInput {
  AND: [LearnStrategyStageWhereInput!]
  LearnStrategy: LearnStrategyWhereInput
  LearnStrategyTarget: LearnStrategyWhereInput
  NOT: [LearnStrategyStageWhereInput!]
  OR: [LearnStrategyStageWhereInput!]
  Technology: TechnologyWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  learnStrategyId: StringFilter
  learnStrategyTargetId: StringNullableFilter
  level: IntNullableFilter
  technologyId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input LearnStrategyStageWhereUniqueInput {
  id: ID!
}

input LearnStrategyUpdateInput {
  description: String
  name: String
}

input LearnStrategyWhereInput {
  AND: [LearnStrategyWhereInput!]
  CreatedBy: UserWhereInput
  LearnStrategyStages: LearnStrategyStageListRelationFilter
  LearnStrategyStagesTargets: LearnStrategyStageListRelationFilter
  NOT: [LearnStrategyWhereInput!]
  OR: [LearnStrategyWhereInput!]
  UserLearnStrategies: UserLearnStrategyListRelationFilter
  createdAt: DateTimeFilter
  createdById: StringFilter
  description: StringNullableFilter
  id: StringFilter
  level: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input LearnStrategyWhereUniqueInput {
  id: String
}

enum LetsadsSmsMessageStatusEnum {
  Complete
  Error
}

enum LetsadsSmsMessageStatusErrorCodeEnum {
  API_DISABLED
  AUTH_DATA
  INCORRECT_FROM
  INVALID_FROM
  MAX_MESSAGES_COUNT
  MESSAGE_TOO_LONG
  NOT_ENOUGH_MONEY
  NO_DATA
  NO_MESSAGE
  REQUEST_FORMAT
  UNKNOWN_ERROR
  USER_NOT_MODERATED
  WRONG_DATA_FORMAT
}

input LetsadsSmsMessageStatusItemListRelationFilter {
  every: LetsadsSmsMessageStatusItemWhereInput
  none: LetsadsSmsMessageStatusItemWhereInput
  some: LetsadsSmsMessageStatusItemWhereInput
}

input LetsadsSmsMessageStatusItemWhereInput {
  AND: [LetsadsSmsMessageStatusItemWhereInput!]
  LetsadsSmsMessageStatus: LetsadsSmsMessageStatusWhereInput
  NOT: [LetsadsSmsMessageStatusItemWhereInput!]
  OR: [LetsadsSmsMessageStatusItemWhereInput!]
  Status: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  sms_id: IntFilter
  updatedAt: DateTimeFilter
}

input LetsadsSmsMessageStatusWhereInput {
  AND: [LetsadsSmsMessageStatusWhereInput!]
  LetsadsSmsMessageStatusItem: LetsadsSmsMessageStatusItemListRelationFilter
  NOT: [LetsadsSmsMessageStatusWhereInput!]
  OR: [LetsadsSmsMessageStatusWhereInput!]
  SmsMessage: SmsMessageListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  errorCode: EnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter
  id: StringFilter
  name: EnumLetsadsSmsMessageStatusEnumNullableFilter
  updatedAt: DateTimeFilter
}

input LetterListRelationFilter {
  every: LetterWhereInput
  none: LetterWhereInput
  some: LetterWhereInput
}

enum LetterStatus {
  Created
  Error
  Processing
  Sended
}

input LetterWhereInput {
  AND: [LetterWhereInput!]
  NOT: [LetterWhereInput!]
  OR: [LetterWhereInput!]
  User: StringNullableFilter
  User_LetterToUser: UserWhereInput
  createdAt: DateTimeFilter
  deleteOnSend: BoolFilter
  email: StringFilter
  errorMessage: StringNullableFilter
  id: StringFilter
  message: StringFilter
  rank: IntNullableFilter
  replyTo: StringNullableFilter
  returnTo: StringNullableFilter
  status: EnumLetterStatusFilter
  subject: StringFilter
  updatedAt: DateTimeFilter
}

enum LogLevel {
  Error
  Fatal
  Info
  Notice
  Warning
}

input LogListRelationFilter {
  every: LogWhereInput
  none: LogWhereInput
  some: LogWhereInput
}

input LogWhereInput {
  AND: [LogWhereInput!]
  Import: StringNullableFilter
  Import_ImportToLog: ImportWhereInput
  NOT: [LogWhereInput!]
  OR: [LogWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  level: EnumLogLevelFilter
  message: StringFilter
  objectType: StringNullableFilter
  stack: StringNullableFilter
  updatedAt: DateTimeFilter
}

input LogedInListRelationFilter {
  every: LogedInWhereInput
  none: LogedInWhereInput
  some: LogedInWhereInput
}

input LogedInWhereInput {
  AND: [LogedInWhereInput!]
  NOT: [LogedInWhereInput!]
  OR: [LogedInWhereInput!]
  User: StringNullableFilter
  User_LogedInToUser: UserWhereInput
  createdAt: DateTimeFilter
  fake: BoolNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

"""
Связка Метнор-Менти
"""
type MentorMentee {
  """
  Менти
  """
  Mentee: User

  """
  Ментор
  """
  Mentor: User
  createdAt: DateTime!
  id: ID!
  menteeId: ID!
  mentorId: ID!
  status: MentorMenteeStatus!
  updatedAt: DateTime!
}

input MentorMenteeCreateInput {
  """
  ID ментора
  """
  mentorId: ID!
}

input MentorMenteeListRelationFilter {
  every: MentorMenteeWhereInput
  none: MentorMenteeWhereInput
  some: MentorMenteeWhereInput
}

input MentorMenteeMentorIdMenteeIdCompoundUniqueInput {
  menteeId: String!
  mentorId: String!
}

input MentorMenteeOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  menteeId: SortOrder
  mentorId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

enum MentorMenteeStatus {
  """
  Запрос принят
  """
  Accepted

  """
  Запрос отклонен
  """
  Rejected

  """
  Отправлен запрос
  """
  Request
}

input MentorMenteeWhereInput {
  AND: [MentorMenteeWhereInput!]
  Mentee: UserWhereInput
  Mentor: UserWhereInput
  NOT: [MentorMenteeWhereInput!]
  OR: [MentorMenteeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  menteeId: StringFilter
  mentorId: StringFilter
  status: EnumMentorMenteeStatusFilter
  updatedAt: DateTimeFilter
}

input MentorMenteeWhereUniqueInput {
  id: String
  mentorId_menteeId: MentorMenteeMentorIdMenteeIdCompoundUniqueInput
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

enum MessageType {
  ERROR
  INFO
  PLAYER
  SERVER
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  World: WorldWhereInput
  body: StringFilter
  id: StringFilter
  sender: StringNullableFilter
  type: EnumMessageTypeFilter
  world: StringNullableFilter
}

type Mutation {
  """
  Заблокировать пользователя
  """
  blockUser(where: UserWhereUniqueInput!): User!
  createBlogProcessor(data: BlogCreateInput!): ResourceResponse!
  createChatMessageProcessor(
    data: ChatMessageCreateInput!
  ): ChatMessageResponse!
  createCodeChallengeCompletionProcessor(
    data: CodeChallengeCompletionCreateInput!
  ): CodeChallengeCompletionResponse!
  createCommentProcessor(data: CommentCreateInput!): ResourceResponse!
  createLearnStrategy(data: LearnStrategyCreateInput!): LearnStrategy!
  createLearnStrategyStage(
    data: LearnStrategyStageCreateInput!
  ): LearnStrategyStage!

  """
  Создает заявку на менторство
  """
  createMentorMentee(data: MentorMenteeCreateInput!): MentorMentee!
  createProjectProcessor(data: ProjectCreateInput!): ProjectResponse!
  createResetPasswordProcessor(
    where: UserWhereUniqueInput!
  ): ResetPasswordResponse!
  createTaskProcessor(data: TaskCreateInput!): TaskResponse!
  createTaskTechnologyProcessor(
    data: TaskTechnologyCreateInput!
  ): TaskTechnologyResponse!
  createTechnology(data: TechnologyCreateInput!): Technology!
  createTimerProcessor(data: TimerCreateInput!): TimerResponse!
  createTopicProcessor(data: TopicCreateInput!): ResourceResponse!
  createUserLearnStrategy(
    data: UserLearnStrategyCreateInput!
  ): UserLearnStrategy!
  createUserTechnologyProcessor(
    data: UserTechnologyCreateInput!
  ): UserTechnologyResponse!
  deleteLearnStrategyStage(
    where: LearnStrategyStageWhereUniqueInput!
  ): LearnStrategyStage!
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  resetPasswordProcessor(where: ResetPasswordProcessorWhereInput!): AuthPayload!

  """
  Авторизация
  """
  signin(data: UserSigninDataInput!, where: UserWhereUniqueInput!): AuthPayload!

  """
  Регистрация
  """
  signup(data: UserSignupDataInput!): AuthPayload!

  """
  Загрузка файла
  """
  singleUpload(
    data: SingleUploadInput

    """
    Устаревший параметр
    """
    file: Upload
  ): File

  """
  Разблокировать пользователя
  """
  unblockUser(where: UserWhereUniqueInput!): User!
  updateBlogProcessor(
    data: BlogUpdateInput!
    where: ResourceWhereUniqueInput!
  ): ResourceResponse!
  updateCodeChallenge(
    data: CodeChallengeUpdateInput!
    where: CodeChallengeWhereUniqueInput!
  ): CodeChallenge!
  updateCodeChallengeCompletionProcessor(
    data: CodeChallengeCompletionUpdateInput!
    where: CodeChallengeCompletionWhereUniqueInput!
  ): CodeChallengeCompletionResponse!
  updateCommentProcessor(
    data: CommentUpdateInput!
    where: ResourceWhereUniqueInput!
  ): ResourceResponse!
  updateLearnStrategy(
    data: LearnStrategyUpdateInput!
    where: LearnStrategyWhereUniqueInput!
  ): LearnStrategy!
  updateProjectProcessor(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): ProjectResponse!
  updateTaskProcessor(
    data: TaskUpdateInput!
    where: TaskWhereUniqueInput!
  ): TaskResponse!
  updateTaskTechnologyProcessor(
    data: TaskTechnologyUpdateInput!
    where: TaskTechnologyWhereUniqueInput!
  ): TaskTechnologyResponse!
  updateTechnology(
    data: TechnologyUpdateInput!
    where: TechnologyWhereUniqueInput!
  ): Technology!
  updateTimerProcessor(
    data: TimerUpdateInput!
    where: TimerWhereUniqueInput!
  ): TimerResponse!
  updateTopicProcessor(
    data: TopicUpdateInput!
    where: ResourceWhereUniqueInput!
  ): ResourceResponse!
  updateUserProcessor(data: UserUpdateInput!): UserResponse!
  updateUserTechnologyProcessor(
    data: UserTechnologyUpdateInput!
    where: UserTechnologyWhereUniqueInput!
  ): UserTechnologyResponse!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumCallRequestStatusFilter {
  equals: CallRequestStatus
  in: [CallRequestStatus!]
  not: NestedEnumCallRequestStatusFilter
  notIn: [CallRequestStatus!]
}

input NestedEnumEthAccountTypeFilter {
  equals: EthAccountType
  in: [EthAccountType!]
  not: NestedEnumEthAccountTypeFilter
  notIn: [EthAccountType!]
}

input NestedEnumEthTransactionTypeNullableFilter {
  equals: EthTransactionType
  in: [EthTransactionType!]
  not: NestedEnumEthTransactionTypeNullableFilter
  notIn: [EthTransactionType!]
}

input NestedEnumGamemodeFilter {
  equals: Gamemode
  in: [Gamemode!]
  not: NestedEnumGamemodeFilter
  notIn: [Gamemode!]
}

input NestedEnumImportStatusFilter {
  equals: ImportStatus
  in: [ImportStatus!]
  not: NestedEnumImportStatusFilter
  notIn: [ImportStatus!]
}

input NestedEnumLetsadsSmsMessageStatusEnumNullableFilter {
  equals: LetsadsSmsMessageStatusEnum
  in: [LetsadsSmsMessageStatusEnum!]
  not: NestedEnumLetsadsSmsMessageStatusEnumNullableFilter
  notIn: [LetsadsSmsMessageStatusEnum!]
}

input NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter {
  equals: LetsadsSmsMessageStatusErrorCodeEnum
  in: [LetsadsSmsMessageStatusErrorCodeEnum!]
  not: NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter
  notIn: [LetsadsSmsMessageStatusErrorCodeEnum!]
}

input NestedEnumLetterStatusFilter {
  equals: LetterStatus
  in: [LetterStatus!]
  not: NestedEnumLetterStatusFilter
  notIn: [LetterStatus!]
}

input NestedEnumLogLevelFilter {
  equals: LogLevel
  in: [LogLevel!]
  not: NestedEnumLogLevelFilter
  notIn: [LogLevel!]
}

input NestedEnumMentorMenteeStatusFilter {
  equals: MentorMenteeStatus
  in: [MentorMenteeStatus!]
  not: NestedEnumMentorMenteeStatusFilter
  notIn: [MentorMenteeStatus!]
}

input NestedEnumMessageTypeFilter {
  equals: MessageType
  in: [MessageType!]
  not: NestedEnumMessageTypeFilter
  notIn: [MessageType!]
}

input NestedEnumNoticeTypeFilter {
  equals: NoticeType
  in: [NoticeType!]
  not: NestedEnumNoticeTypeFilter
  notIn: [NoticeType!]
}

input NestedEnumProjectMemberStatusFilter {
  equals: ProjectMemberStatus
  in: [ProjectMemberStatus!]
  not: NestedEnumProjectMemberStatusFilter
  notIn: [ProjectMemberStatus!]
}

input NestedEnumProjectStatusNullableFilter {
  equals: ProjectStatus
  in: [ProjectStatus!]
  not: NestedEnumProjectStatusNullableFilter
  notIn: [ProjectStatus!]
}

input NestedEnumProjectTypeNullableFilter {
  equals: ProjectType
  in: [ProjectType!]
  not: NestedEnumProjectTypeNullableFilter
  notIn: [ProjectType!]
}

input NestedEnumResourceTypeFilter {
  equals: ResourceType
  in: [ResourceType!]
  not: NestedEnumResourceTypeFilter
  notIn: [ResourceType!]
}

input NestedEnumTagStatusFilter {
  equals: TagStatus
  in: [TagStatus!]
  not: NestedEnumTagStatusFilter
  notIn: [TagStatus!]
}

input NestedEnumTaskMemberStatusFilter {
  equals: TaskMemberStatus
  in: [TaskMemberStatus!]
  not: NestedEnumTaskMemberStatusFilter
  notIn: [TaskMemberStatus!]
}

input NestedEnumTaskReactionTypeFilter {
  equals: TaskReactionType
  in: [TaskReactionType!]
  not: NestedEnumTaskReactionTypeFilter
  notIn: [TaskReactionType!]
}

input NestedEnumTaskStatusFilter {
  equals: TaskStatus
  in: [TaskStatus!]
  not: NestedEnumTaskStatusFilter
  notIn: [TaskStatus!]
}

input NestedEnumTeamMemberStatusFilter {
  equals: TeamMemberStatus
  in: [TeamMemberStatus!]
  not: NestedEnumTeamMemberStatusFilter
  notIn: [TeamMemberStatus!]
}

input NestedEnumTeamStatusFilter {
  equals: TeamStatus
  in: [TeamStatus!]
  not: NestedEnumTeamStatusFilter
  notIn: [TeamStatus!]
}

input NestedEnumTechnologyLessonUserStatusFilter {
  equals: TechnologyLessonUserStatus
  in: [TechnologyLessonUserStatus!]
  not: NestedEnumTechnologyLessonUserStatusFilter
  notIn: [TechnologyLessonUserStatus!]
}

input NestedEnumUserTechnologyHiringStatusNullableFilter {
  equals: UserTechnologyHiringStatus
  in: [UserTechnologyHiringStatus!]
  not: NestedEnumUserTechnologyHiringStatusNullableFilter
  notIn: [UserTechnologyHiringStatus!]
}

input NestedEnumUserTechnologyStatusNullableFilter {
  equals: UserTechnologyStatus
  in: [UserTechnologyStatus!]
  not: NestedEnumUserTechnologyStatusNullableFilter
  notIn: [UserTechnologyStatus!]
}

input NestedEnumWorldTypeFilter {
  equals: WorldType
  in: [WorldType!]
  not: NestedEnumWorldTypeFilter
  notIn: [WorldType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Notice {
  ChatMessage: ChatMessage
  ChatRoomInvitation: ChatRoomInvitation
  CreatedBy: User
  User: User
  createdAt: DateTime!
  id: ID!
  type: NoticeType!
  updatedAt: DateTime!
}

input NoticeListRelationFilter {
  every: NoticeWhereInput
  none: NoticeWhereInput
  some: NoticeWhereInput
}

input NoticeOrderByInput {
  ChatMessage: SortOrder
  CreatedBy: SortOrder
  User: SortOrder
  createdAt: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum NoticeType {
  Call
  CallRequest
  ChatMessage
  ChatRoomInvitation
}

input NoticeWhereInput {
  AND: [NoticeWhereInput!]
  ChatMessage: StringNullableFilter
  ChatMessage_ChatMessageToNotice: ChatMessageWhereInput
  ChatRoomInvitations: ChatRoomInvitationListRelationFilter
  CreatedBy: StringNullableFilter
  NOT: [NoticeWhereInput!]
  OR: [NoticeWhereInput!]
  User: StringNullableFilter
  User_Notice_CreatedByToUser: UserWhereInput
  User_Notice_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  type: EnumNoticeTypeFilter
  updatedAt: DateTimeFilter
}

input NoticeWhereUniqueInput {
  id: String
}

type NotificationType {
  code: ID
  comment: String
  createdAt: DateTime!
  id: ID!
  name: String!
  oldID: Int
  updatedAt: DateTime!
}

input NotificationTypeListRelationFilter {
  every: NotificationTypeWhereInput
  none: NotificationTypeWhereInput
  some: NotificationTypeWhereInput
}

input NotificationTypeOrderByInput {
  CreatedBy: SortOrder
  code: SortOrder
  comment: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  oldID: SortOrder
  updatedAt: SortOrder
}

input NotificationTypeWhereInput {
  AND: [NotificationTypeWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [NotificationTypeWhereInput!]
  OR: [NotificationTypeWhereInput!]
  User_NotificationTypeToUser: UserWhereInput
  User_UserNotificationTypes: UserListRelationFilter
  code: StringNullableFilter
  comment: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  oldID: IntNullableFilter
  updatedAt: DateTimeFilter
}

input NotificationTypeWhereUniqueInput {
  code: String
  id: String
  oldID: Int
}

input NotificationType_UserNotificationTypes_UpdateInput {
  connect: NotificationTypeWhereUniqueInput
  disconnect: NotificationTypeWhereUniqueInput
}

input PlayerListRelationFilter {
  every: PlayerWhereInput
  none: PlayerWhereInput
  some: PlayerWhereInput
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  Inventory: InventoryWhereInput
  NOT: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  User: UserWhereInput
  World: WorldWhereInput
  createdAt: DateTimeFilter
  dirx: DecimalFilter
  diry: DecimalFilter
  gamemode: EnumGamemodeFilter
  id: StringFilter
  inventory: StringNullableFilter
  isAdmin: BoolFilter
  lastLogin: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  user: StringNullableFilter
  world: StringNullableFilter
  x: DecimalFilter
  y: DecimalFilter
  z: DecimalFilter
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  User_PositionToUser: UserWhereInput
  User_PositionUsers: UserListRelationFilter
  code: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type Project {
  CreatedBy: User
  Members: [ProjectMember!]
  ProjectTasks(orderBy: ProjectTaskOrderByInput): [ProjectTask!]
  Resource: Resource
  content: JSON
  contentText: String
  createdAt: DateTime!
  description: String
  domain: String
  id: ID!
  name: String!
  oldID: Int
  public: Boolean
  sequence: Int
  status: ProjectStatus
  type: ProjectType
  updatedAt: DateTime!
  url: String
}

input ProjectCreateInput {
  name: String!
}

input ProjectCreateOneWithoutProjectTasksInput {
  connect: ProjectWhereUniqueInput
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMember {
  Project: Project
  User: User
  createdAt: DateTime!
  id: ID!
  status: ProjectMemberStatus
  updatedAt: DateTime!
}

input ProjectMemberListRelationFilter {
  every: ProjectMemberWhereInput
  none: ProjectMemberWhereInput
  some: ProjectMemberWhereInput
}

enum ProjectMemberStatus {
  Active
  Fired
  Invited
  Quit
}

input ProjectMemberWhereInput {
  AND: [ProjectMemberWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [ProjectMemberWhereInput!]
  OR: [ProjectMemberWhereInput!]
  Project: StringNullableFilter
  Project_ProjectToProjectMember: ProjectWhereInput
  Services: ServiceListRelationFilter
  User: StringNullableFilter
  User_ProjectMember_CreatedByToUser: UserWhereInput
  User_ProjectMember_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  status: EnumProjectMemberStatusFilter
  updatedAt: DateTimeFilter
}

input ProjectOrderByInput {
  ChatRoom: SortOrder
  CreatedBy: SortOrder
  Image: SortOrder
  Resource: SortOrder
  Team: SortOrder
  content: SortOrder
  contentText: SortOrder
  createdAt: SortOrder
  description: SortOrder
  domain: SortOrder
  id: SortOrder
  name: SortOrder
  oldID: SortOrder
  public: SortOrder
  sequence: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type ProjectResponse {
  data: Project
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

enum ProjectStatus {
  Accepted
  Completed
  New
  Processing
  Rejected
  Reopened
}

type ProjectTask {
  CreatedBy: User
  Project: Project
  Task: Task
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input ProjectTaskListRelationFilter {
  every: ProjectTaskWhereInput
  none: ProjectTaskWhereInput
  some: ProjectTaskWhereInput
}

input ProjectTaskOrderByInput {
  CreatedBy: SortOrder
  Project: SortOrder
  Task: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum ProjectTaskType {
  Blog
  Comment
  PersonalBlog
  Project
  ProjectTask
  Service
  Team
  Topic
}

input ProjectTaskWhereInput {
  AND: [ProjectTaskWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [ProjectTaskWhereInput!]
  OR: [ProjectTaskWhereInput!]
  Project: StringNullableFilter
  Project_ProjectToProjectTask: ProjectWhereInput
  Task: StringNullableFilter
  Task_ProjectTaskToTask: TaskWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectTaskWhereUniqueInput {
  id: String
}

enum ProjectType {
  Education
}

input ProjectUpdateInput {
  name: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  ChatRoom: StringNullableFilter
  ChatRoom_ChatRoomToProject: ChatRoomWhereInput
  CreatedBy: StringNullableFilter
  EthAccounts: EthAccountListRelationFilter
  File: FileWhereInput
  Image: StringNullableFilter
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  ProjectMembers: ProjectMemberListRelationFilter
  ProjectTasks: ProjectTaskListRelationFilter
  Resource: StringNullableFilter
  Resource_Project_ResourceToResource: ResourceWhereInput
  Resources_ProjectToResource_PrismaProject: ResourceListRelationFilter
  Team: StringNullableFilter
  Team_ProjectCustomers: TeamListRelationFilter
  Team_ProjectToTeam: TeamWhereInput
  Templates_ProjectToTemplate_PrismaProject: TemplateListRelationFilter
  Templates_ProjectToTemplate_Project: TemplateListRelationFilter
  User_PrismaProjectUsers: UserListRelationFilter
  User_ProjectToUser: UserWhereInput
  content: JsonNullableFilter
  contentText: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  domain: StringNullableFilter
  id: StringFilter
  name: StringFilter
  oldID: IntNullableFilter
  public: BoolNullableFilter
  sequence: IntNullableFilter
  status: EnumProjectStatusNullableFilter
  type: EnumProjectTypeNullableFilter
  updatedAt: DateTimeFilter
  url: StringNullableFilter
}

input ProjectWhereUniqueInput {
  id: String
  oldID: Int
  sequence: Int
}

type Query {
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  chatMessages(
    cursor: ChatMessageWhereUniqueInput
    orderBy: [ChatMessageOrderByInput!]
    skip: Int
    take: Int
    where: ChatMessageWhereInput
  ): [ChatMessage!]!
  chatMessagesCount(where: ChatMessageWhereInput): Int!
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  chatRooms(
    cursor: ChatRoomWhereUniqueInput
    orderBy: [ChatRoomOrderByInput!]
    skip: Int
    take: Int
    where: ChatRoomWhereInput
  ): [ChatRoom!]!

  """
  Количество чат-комнат
  """
  chatRoomsCount(where: ChatRoomWhereInput): Int!
  codeChallenge(where: CodeChallengeWhereUniqueInput!): CodeChallenge
  codeChallengeBlock(
    where: CodeChallengeBlockWhereUniqueInput!
  ): CodeChallengeBlock
  codeChallengeBlocks(
    cursor: CodeChallengeBlockWhereUniqueInput
    orderBy: [CodeChallengeBlockOrderByInput!]
    skip: Int
    take: Int
    where: CodeChallengeBlockWhereInput
  ): [CodeChallengeBlock!]!
  codeChallengeBlocksCount(where: CodeChallengeBlockWhereInput): Int!
  codeChallengeCompletion(
    where: CodeChallengeCompletionWhereUniqueInput!
  ): CodeChallengeCompletion
  codeChallengeCompletions(
    cursor: CodeChallengeCompletionWhereUniqueInput
    orderBy: [CodeChallengeCompletionOrderByInput!]
    skip: Int
    take: Int
    where: CodeChallengeCompletionWhereInput
  ): [CodeChallengeCompletion!]!
  codeChallenges(
    cursor: CodeChallengeWhereUniqueInput
    orderBy: [CodeChallengeOrderByInput!]
    skip: Int
    take: Int
    where: CodeChallengeWhereInput
  ): [CodeChallenge!]!

  """
  Файл
  """
  file(where: FileWhereUniqueInput!): File

  """
  Список файлов
  """
  files(
    cursor: FileWhereUniqueInput
    orderBy: [FileOrderByInput!]
    skip: Int
    take: Int
    where: FileWhereInput
  ): [File!]!

  """
  Количество файлов
  """
  filesCount(where: FileWhereInput): Int!
  learnStrategies(
    cursor: LearnStrategyWhereUniqueInput
    orderBy: [LearnStrategyOrderByInput!]
    skip: Int
    take: Int
    where: LearnStrategyWhereInput
  ): [LearnStrategy!]!
  learnStrategiesCount(where: LearnStrategyWhereInput): Int!
  learnStrategy(where: LearnStrategyWhereUniqueInput!): LearnStrategy
  learnStrategyStage(
    where: LearnStrategyStageWhereUniqueInput!
  ): LearnStrategyStage
  learnStrategyStages(
    cursor: LearnStrategyStageWhereUniqueInput
    orderBy: [LearnStrategyStageOrderByInput!]
    skip: Int
    take: Int
    where: LearnStrategyStageWhereInput
  ): [LearnStrategyStage!]!
  learnStrategyStagesCount(where: LearnStrategyStageWhereInput): Int!
  me: User
  mentorMentee(where: MentorMenteeWhereUniqueInput!): MentorMentee
  mentorMentees(
    cursor: MentorMenteeWhereUniqueInput
    orderBy: [MentorMenteeOrderByInput!]
    skip: Int
    take: Int
    where: MentorMenteeWhereInput
  ): [MentorMentee!]!
  mentorMenteesCount(where: MentorMenteeWhereInput): Int!

  """
  Уведомление
  """
  notice(where: NoticeWhereUniqueInput!): Notice

  """
  Список уведомлений
  """
  notices(
    cursor: NoticeWhereUniqueInput
    orderBy: [NoticeOrderByInput!]
    skip: Int
    take: Int
    where: NoticeWhereInput
  ): [Notice!]!

  """
  Количество уведомлений
  """
  noticesCount(where: NoticeWhereInput): Int!

  """
  Список уведомлений
  """
  notificationTypes(
    cursor: NotificationTypeWhereUniqueInput
    orderBy: [NotificationTypeOrderByInput!]
    skip: Int
    take: Int
    where: NotificationTypeWhereInput
  ): [NotificationType!]!

  """
  Количество уведомлений
  """
  notificationTypesCount(where: NotificationTypeWhereInput): Int!
  project(where: ProjectWhereUniqueInput!): Project
  projectTasks(
    cursor: ProjectTaskWhereUniqueInput
    orderBy: [ProjectTaskOrderByInput!]
    skip: Int
    take: Int
    where: ProjectTaskWhereInput
  ): [ProjectTask!]!
  projects(
    cursor: ProjectWhereUniqueInput
    orderBy: [ProjectOrderByInput!]
    skip: Int
    take: Int
    where: ProjectWhereInput
  ): [Project!]!
  projectsCount(where: ProjectWhereInput): Int!
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(
    cursor: ResourceWhereUniqueInput
    orderBy: [ResourceOrderByInput!]
    skip: Int
    take: Int
    where: ResourceWhereInput
  ): [Resource!]!
  resourcesCount(where: ResourceWhereInput): Int!
  tag(where: TagWhereUniqueInput!): Tag
  tags(
    cursor: TagWhereUniqueInput
    orderBy: [TagOrderByInput!]
    skip: Int
    take: Int
    where: TagWhereInput
  ): [Tag!]!
  tagsCount(where: TagWhereInput): Int!
  task(where: TaskWhereUniqueInput!): Task
  taskTechnologies(
    cursor: TaskTechnologyWhereUniqueInput
    orderBy: [TaskTechnologyOrderByInput!]
    skip: Int
    take: Int
    where: TaskTechnologyWhereInput
  ): [TaskTechnology!]!
  taskTechnology(where: TaskTechnologyWhereUniqueInput!): TaskTechnology
  taskTechnologysCount(where: TaskTechnologyWhereInput): Int!
  tasks(
    cursor: TaskWhereUniqueInput
    orderBy: [TaskOrderByInput!]
    skip: Int
    take: Int
    where: TaskWhereInput
  ): [Task!]!
  tasksCount(where: TaskWhereInput): Int!
  technologies(
    cursor: TechnologyWhereUniqueInput
    orderBy: [TechnologyOrderByInput!]
    skip: Int
    take: Int
    where: TechnologyWhereInput
  ): [Technology!]!
  technologiesCount(where: TechnologyWhereInput): Int!
  technology(where: TechnologyWhereUniqueInput!): Technology
  timer(where: TimerWhereUniqueInput!): Timer
  timers(
    cursor: TimerWhereUniqueInput
    orderBy: [TimerOrderByInput!]
    skip: Int
    take: Int
    where: TimerWhereInput
  ): [Timer!]!

  """
  Количество таймеров
  """
  timersCount(where: TimerWhereInput): Int!

  """
  Пользователь
  """
  user(where: UserWhereUniqueInput!): User
  userLearnStrategies(
    cursor: UserLearnStrategyWhereUniqueInput
    orderBy: [UserLearnStrategyOrderByInput!]
    skip: Int
    take: Int
    where: UserLearnStrategyWhereInput
  ): [UserLearnStrategy!]!
  userLearnStrategiesCount(where: UserLearnStrategyWhereInput): Int!
  userLearnStrategy(
    where: UserLearnStrategyWhereUniqueInput!
  ): UserLearnStrategy
  userTechnologies(
    cursor: UserTechnologyWhereUniqueInput
    orderBy: [UserTechnologyOrderByInput!]
    skip: Int
    take: Int
    where: UserTechnologyWhereInput
  ): [UserTechnology!]!
  userTechnology(where: UserTechnologyWhereUniqueInput!): UserTechnology
  userTechnologysCount(where: UserTechnologyWhereInput): Int!

  """
  Список пользователей
  """
  users(
    cursor: UserWhereUniqueInput
    orderBy: [UserOrderByInput!]
    skip: Int
    take: Int
    where: UserWhereInput
  ): [User!]!

  """
  Количество пользователей
  """
  usersCount(where: UserWhereInput): Int!
}

"""
Объект ошибки
"""
type RequestError {
  key: String!
  message: String!
}

type ResetPassword {
  foo: String
  id: ID!
}

input ResetPasswordListRelationFilter {
  every: ResetPasswordWhereInput
  none: ResetPasswordWhereInput
  some: ResetPasswordWhereInput
}

input ResetPasswordProcessorWhereInput {
  User: UserWhereUniqueInput!
  code: ID!
}

type ResetPasswordResponse {
  data: ResetPassword
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input ResetPasswordWhereInput {
  AND: [ResetPasswordWhereInput!]
  NOT: [ResetPasswordWhereInput!]
  OR: [ResetPasswordWhereInput!]
  User: StringFilter
  User_ResetPasswordToUser: UserWhereInput
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  password: StringFilter
  updatedAt: DateTimeFilter
  validTill: DateTimeNullableFilter
}

input ResetPasswordWhereUniqueInput {
  id: ID
}

type Resource {
  Blog: Resource
  CodeChallenge: CodeChallenge

  """
  Комментарии
  """
  Comments(orderBy: ResourceOrderByInput): [Resource!]
  CreatedBy: User
  Image: File
  Tags: [ResourceTag!]
  Task: Task
  Topic: Resource
  class_key: String
  commentOldID: Int
  components: JSON
  content: JSON
  contentText: String
  createdAt: DateTime!
  deleted: Boolean!
  hidemenu: Boolean!
  id: ID!
  isfolder: Boolean!
  longtitle: String
  mockUpdate: DateTime
  name: String
  negativeVotesCount: Int
  neutralVotesCount: Int
  oldID: Int
  positiveVotesCount: Int
  published: Boolean!
  rating: Float
  searchable: Boolean!
  template: Int
  type: ResourceType
  updatedAt: DateTime!
  uri: String!
}

input ResourceListRelationFilter {
  every: ResourceWhereInput
  none: ResourceWhereInput
  some: ResourceWhereInput
}

input ResourceOrderByInput {
  Blog: SortOrder
  CreatedBy: SortOrder
  EthAccount: SortOrder
  Parent: SortOrder
  PrismaProject: SortOrder
  Service: SortOrder
  Task: SortOrder
  Team: SortOrder
  Topic: SortOrder
  class_key: SortOrder
  code: SortOrder
  commentOldID: SortOrder
  components: SortOrder
  content: SortOrder
  contentText: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  hidemenu: SortOrder
  id: SortOrder
  isfolder: SortOrder
  longtitle: SortOrder
  mockUpdate: SortOrder
  name: SortOrder
  negativeVotesCount: SortOrder
  neutralVotesCount: SortOrder
  oldID: SortOrder
  positiveVotesCount: SortOrder
  published: SortOrder
  rating: SortOrder
  searchable: SortOrder
  template: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  uri: SortOrder
}

type ResourceResponse {
  data: Resource
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

type ResourceTag {
  CreatedBy: User
  Resource: Resource
  Tag: Tag
  createdAt: DateTime!
  id: ID!
  status: TagStatus!
  updatedAt: DateTime!
}

input ResourceTagListRelationFilter {
  every: ResourceTagWhereInput
  none: ResourceTagWhereInput
  some: ResourceTagWhereInput
}

input ResourceTagWhereInput {
  AND: [ResourceTagWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [ResourceTagWhereInput!]
  OR: [ResourceTagWhereInput!]
  Resource: StringNullableFilter
  Resource_ResourceToResourceTag: ResourceWhereInput
  Tag: StringNullableFilter
  Tag_ResourceTagToTag: TagWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  status: StringFilter
  updatedAt: DateTimeFilter
}

enum ResourceType {
  Blog
  Comment
  PersonalBlog
  Project
  Resource
  Service
  Team
  Topic
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  Blog: StringNullableFilter
  CodeChallenges: CodeChallengeListRelationFilter
  CreatedBy: StringNullableFilter
  EthAccount: StringNullableFilter
  EthAccount_EthAccountToResource: EthAccountWhereInput
  Files: FileListRelationFilter
  Galleries: GalleryListRelationFilter
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  Parent: StringNullableFilter
  PrismaProject: StringNullableFilter
  Project_ProjectToResource_PrismaProject: ProjectWhereInput
  Projects_Project_ResourceToResource: ProjectListRelationFilter
  ResourceTags: ResourceTagListRelationFilter
  Resource_ResourceToResource_Blog: ResourceWhereInput
  Resource_ResourceToResource_Parent: ResourceWhereInput
  Resource_ResourceToResource_Topic: ResourceWhereInput
  Service: StringNullableFilter
  Service_ResourceToService: ServiceWhereInput
  Task: StringNullableFilter
  Task_ResourceToTask: TaskWhereInput
  Team: StringNullableFilter
  Team_ResourceToTeam: TeamWhereInput
  Topic: StringNullableFilter
  User: UserWhereInput
  Votes: VoteListRelationFilter
  class_key: StringNullableFilter
  code: StringNullableFilter
  commentOldID: IntNullableFilter
  components: JsonNullableFilter
  content: JsonNullableFilter
  contentText: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: BoolFilter
  hidemenu: BoolFilter
  id: StringFilter
  isfolder: BoolFilter
  longtitle: StringNullableFilter
  mockUpdate: DateTimeNullableFilter
  name: StringNullableFilter
  negativeVotesCount: IntNullableFilter
  neutralVotesCount: IntNullableFilter
  oldID: IntNullableFilter
  other_Resource_ResourceToResource_Blogs: ResourceListRelationFilter
  other_Resource_ResourceToResource_Parents: ResourceListRelationFilter
  other_Resource_ResourceToResource_Topics: ResourceListRelationFilter
  positiveVotesCount: IntNullableFilter
  published: BoolFilter
  rating: DecimalNullableFilter
  searchable: BoolFilter
  template: IntNullableFilter
  type: EnumResourceTypeFilter
  updatedAt: DateTimeFilter
  uri: StringFilter
}

input ResourceWhereUniqueInput {
  code: String
  commentOldID: Int
  id: String
  oldID: Int
  uri: String
}

input RouteListRelationFilter {
  every: RouteWhereInput
  none: RouteWhereInput
  some: RouteWhereInput
}

input RouteWhereInput {
  AND: [RouteWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  Parent: StringNullableFilter
  Route: RouteWhereInput
  User: UserWhereInput
  component: StringFilter
  exact: BoolFilter
  id: StringFilter
  name: StringNullableFilter
  other_Routes: RouteListRelationFilter
  path: StringFilter
}

input ServiceCategoryListRelationFilter {
  every: ServiceCategoryWhereInput
  none: ServiceCategoryWhereInput
  some: ServiceCategoryWhereInput
}

input ServiceCategoryWhereInput {
  AND: [ServiceCategoryWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [ServiceCategoryWhereInput!]
  OR: [ServiceCategoryWhereInput!]
  Parent: StringNullableFilter
  ServiceCategory: ServiceCategoryWhereInput
  Services: ServiceListRelationFilter
  User: UserWhereInput
  code: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  other_ServiceCategories: ServiceCategoryListRelationFilter
  updatedAt: DateTimeFilter
}

input ServiceListRelationFilter {
  every: ServiceWhereInput
  none: ServiceWhereInput
  some: ServiceWhereInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  Category: StringNullableFilter
  CreatedBy: StringNullableFilter
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  Parent: StringNullableFilter
  ProjectMembers: ProjectMemberListRelationFilter
  Resources: ResourceListRelationFilter
  Service: ServiceWhereInput
  ServiceCategory: ServiceCategoryWhereInput
  User: UserWhereInput
  code: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  oldID: IntNullableFilter
  other_Services: ServiceListRelationFilter
  rank: IntNullableFilter
  updatedAt: DateTimeFilter
}

input SettingsListRelationFilter {
  every: SettingsWhereInput
  none: SettingsWhereInput
  some: SettingsWhereInput
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  User: StringNullableFilter
  User_SettingsToUser: UserWhereInput
  id: StringFilter
  renderDistance: IntFilter
}

input SingleUploadInput {
  """
  В какую директорю загружать файл
  """
  directory: String
  file: Upload!

  """
  Пользовательское имя файла
  """
  name: String
}

input SmsMessageListRelationFilter {
  every: SmsMessageWhereInput
  none: SmsMessageWhereInput
  some: SmsMessageWhereInput
}

input SmsMessageWhereInput {
  AND: [SmsMessageWhereInput!]
  CreatedBy: StringNullableFilter
  LetsadsSmsMessageStatus: LetsadsSmsMessageStatusWhereInput
  NOT: [SmsMessageWhereInput!]
  OR: [SmsMessageWhereInput!]
  Provider: StringNullableFilter
  SmsMessage_recipients: SmsMessage_recipientsListRelationFilter
  SmsProvider: SmsProviderWhereInput
  Status: StringNullableFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  deletOnSend: BoolNullableFilter
  from: StringFilter
  id: StringFilter
  text: StringFilter
  updatedAt: DateTimeFilter
}

input SmsMessage_recipientsListRelationFilter {
  every: SmsMessage_recipientsWhereInput
  none: SmsMessage_recipientsWhereInput
  some: SmsMessage_recipientsWhereInput
}

input SmsMessage_recipientsWhereInput {
  AND: [SmsMessage_recipientsWhereInput!]
  NOT: [SmsMessage_recipientsWhereInput!]
  OR: [SmsMessage_recipientsWhereInput!]
  SmsMessage: SmsMessageWhereInput
  nodeId: StringFilter
  position: IntFilter
  value: StringFilter
}

input SmsProviderListRelationFilter {
  every: SmsProviderWhereInput
  none: SmsProviderWhereInput
  some: SmsProviderWhereInput
}

input SmsProviderWhereInput {
  AND: [SmsProviderWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [SmsProviderWhereInput!]
  OR: [SmsProviderWhereInput!]
  SmsMessages: SmsMessageListRelationFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  credentials: JsonNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  CreatedBy: User
  Resources: [ResourceTag!]
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  CreatedBy: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

enum TagStatus {
  Active
  Blocked
  Moderated
}

input TagWhereInput {
  AND: [TagWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  ResourceTags: ResourceTagListRelationFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  status: EnumTagStatusFilter
  updatedAt: DateTimeFilter
}

input TagWhereUniqueInput {
  id: String
  name: String
}

type Task {
  CodeChallengeCompletion: CodeChallengeCompletion
  Comments(
    orderBy: ResourceOrderByInput
    where: ResourceWhereInput
  ): [Resource!]
  CreatedBy: User
  Parent: Task
  TaskProjects: [ProjectTask!]
  TaskTechnologies: [TaskTechnology!]
  Timers(orderBy: TimerOrderByInput, where: TimerWhereInput): [Timer!]
  content: JSON
  createdAt: DateTime!
  description: String
  endDate: DateTime
  endDatePlaning: DateTime
  id: ID!
  name: String!
  needHelp: Boolean
  startDate: DateTime
  startDatePlaning: DateTime
  status: TaskStatus!
  updatedAt: DateTime!
}

input TaskCreateInput {
  Parent: TaskCreateOneWithoutChildsInput
  Project: ProjectCreateOneWithoutProjectTasksInput
  content: JSON
  description: String
  endDate: DateTime
  endDatePlaning: DateTime
  id: ID
  name: String!
  needHelp: Boolean
  startDate: DateTime
  startDatePlaning: DateTime
  status: TaskStatus
}

input TaskCreateOneWithoutChildsInput {
  connect: TaskWhereUniqueInput
}

input TaskCreateOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
}

input TaskCreateOneWithoutTaskTechnologiesInput {
  connect: TaskWhereUniqueInput
}

input TaskCreateOneWithoutTimersInput {
  connect: TaskWhereUniqueInput
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskMemberListRelationFilter {
  every: TaskMemberWhereInput
  none: TaskMemberWhereInput
  some: TaskMemberWhereInput
}

enum TaskMemberStatus {
  Active
  Fired
  Invited
  Quit
}

input TaskMemberWhereInput {
  AND: [TaskMemberWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [TaskMemberWhereInput!]
  OR: [TaskMemberWhereInput!]
  Task: StringNullableFilter
  Task_TaskToTaskMember: TaskWhereInput
  User: StringNullableFilter
  User_TaskMember_CreatedByToUser: UserWhereInput
  User_TaskMember_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  status: EnumTaskMemberStatusFilter
  updatedAt: DateTimeFilter
}

input TaskOrderByInput {
  ChatRoom: SortOrder
  CreatedBy: SortOrder
  Parent: SortOrder
  content: SortOrder
  createdAt: SortOrder
  description: SortOrder
  endDate: SortOrder
  endDatePlaning: SortOrder
  id: SortOrder
  name: SortOrder
  needHelp: SortOrder
  startDate: SortOrder
  startDatePlaning: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type TaskReaction {
  createdAt: DateTime!
  id: ID!
  type: TaskReactionType
  updatedAt: DateTime!
}

input TaskReactionListRelationFilter {
  every: TaskReactionWhereInput
  none: TaskReactionWhereInput
  some: TaskReactionWhereInput
}

enum TaskReactionType {
  UpVote
}

input TaskReactionWhereInput {
  AND: [TaskReactionWhereInput!]
  CreatedBy: StringFilter
  NOT: [TaskReactionWhereInput!]
  OR: [TaskReactionWhereInput!]
  Task: StringNullableFilter
  Task_TaskToTaskReaction: TaskWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  type: EnumTaskReactionTypeFilter
  updatedAt: DateTimeFilter
}

type TaskResponse {
  data: Task
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

enum TaskStatus {
  Accepted
  Approved
  Completed
  Discuss
  Done
  New
  Paused
  Progress
  Rejected
  RevisionsRequired
}

type TaskTechnology {
  CreatedBy: User
  Task: Task
  Technology: Technology
  createdAt: DateTime!
  id: ID!
  level: UserTechnologyLevel
  updatedAt: DateTime!
}

input TaskTechnologyCreateInput {
  Task: TaskCreateOneWithoutTaskTechnologiesInput!
  Technology: TechnologyCreateOneWithoutTaskTechnologiesInput!
  id: ID
  level: UserTechnologyLevel
}

input TaskTechnologyListRelationFilter {
  every: TaskTechnologyWhereInput
  none: TaskTechnologyWhereInput
  some: TaskTechnologyWhereInput
}

input TaskTechnologyOrderByInput {
  CreatedBy: SortOrder
  Task: SortOrder
  Technology: SortOrder
  createdAt: SortOrder
  id: SortOrder
  level: SortOrder
  updatedAt: SortOrder
}

type TaskTechnologyResponse {
  data: TaskTechnology
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input TaskTechnologyUpdateInput {
  Task: TaskCreateOneWithoutTaskTechnologiesInput
  Technology: TechnologyCreateOneWithoutTaskTechnologiesInput
  level: UserTechnologyLevel
}

input TaskTechnologyWhereInput {
  AND: [TaskTechnologyWhereInput!]
  CreatedBy: StringFilter
  NOT: [TaskTechnologyWhereInput!]
  OR: [TaskTechnologyWhereInput!]
  Task: StringNullableFilter
  Task_TaskToTaskTechnology: TaskWhereInput
  Technology: StringNullableFilter
  Technology_TaskTechnologyToTechnology: TechnologyWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  level: IntNullableFilter
  updatedAt: DateTimeFilter
}

input TaskTechnologyWhereUniqueInput {
  id: String
}

input TaskUpdateInput {
  Timers: TimerUpdateManyWithoutTaskInput
  content: JSON
  description: String
  endDate: DateTime
  endDatePlaning: DateTime
  name: String
  needHelp: Boolean
  startDate: DateTime
  startDatePlaning: DateTime
  status: TaskStatus
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  ChatRoom: StringNullableFilter
  ChatRoom_ChatRoomToTask: ChatRoomWhereInput
  CodeChallengeCompletions: CodeChallengeCompletionListRelationFilter
  CreatedBy: StringNullableFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  Parent: StringNullableFilter
  ProjectTasks: ProjectTaskListRelationFilter
  Resources: ResourceListRelationFilter
  Task: TaskWhereInput
  TaskMembers: TaskMemberListRelationFilter
  TaskReactions: TaskReactionListRelationFilter
  TaskTechnologies: TaskTechnologyListRelationFilter
  Tasks_A: TaskListRelationFilter
  Tasks_B: TaskListRelationFilter
  Timers: TimerListRelationFilter
  User: UserWhereInput
  content: JsonNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  endDate: DateTimeNullableFilter
  endDatePlaning: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  needHelp: BoolNullableFilter
  other_Tasks: TaskListRelationFilter
  startDate: DateTimeNullableFilter
  startDatePlaning: DateTimeNullableFilter
  status: EnumTaskStatusFilter
  updatedAt: DateTimeFilter
}

input TaskWhereUniqueInput {
  id: String
}

input TeamListRelationFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

input TeamMemberListRelationFilter {
  every: TeamMemberWhereInput
  none: TeamMemberWhereInput
  some: TeamMemberWhereInput
}

enum TeamMemberStatus {
  Active
  Fired
  Invited
}

input TeamMemberWhereInput {
  AND: [TeamMemberWhereInput!]
  CreatedBy: StringFilter
  NOT: [TeamMemberWhereInput!]
  OR: [TeamMemberWhereInput!]
  Team: StringNullableFilter
  Team_TeamToTeamMember: TeamWhereInput
  User: StringNullableFilter
  User_TeamMember_CreatedByToUser: UserWhereInput
  User_TeamMember_UserToUser: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  status: EnumTeamMemberStatusFilter
  updatedAt: DateTimeFilter
}

enum TeamStatus {
  Active
  Inactive
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  CreatedBy: StringFilter
  GameResults: GameResultListRelationFilter
  Games: GameListRelationFilter
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  Parent: StringNullableFilter
  Project_ProjectCustomers: ProjectListRelationFilter
  Projects_ProjectToTeam: ProjectListRelationFilter
  Resources: ResourceListRelationFilter
  Team: TeamWhereInput
  TeamMembers: TeamMemberListRelationFilter
  User: UserWhereInput
  address: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  id: StringFilter
  name: StringFilter
  oldID: IntNullableFilter
  other_Teams: TeamListRelationFilter
  phone: StringNullableFilter
  status: EnumTeamStatusFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
}

type Technology {
  CreatedBy: User
  UserTechnologies(orderBy: UserTechnologyOrderByInput): [UserTechnology!]
  components: EditorComponentObject
  createdAt: DateTime!
  description: String
  id: ID!

  """
  Примерное количество часов на освоение уровня
  """
  level1hours: Int

  """
  Примерное количество часов на освоение уровня
  """
  level2hours: Int

  """
  Примерное количество часов на освоение уровня
  """
  level3hours: Int

  """
  Примерное количество часов на освоение уровня
  """
  level4hours: Int

  """
  Примерное количество часов на освоение уровня
  """
  level5hours: Int
  name: String!
  site_url: String
  updatedAt: DateTime!
}

input TechnologyCreateInput {
  description: String
  name: String!
}

input TechnologyCreateOneWithoutTaskTechnologiesInput {
  connect: TechnologyWhereUniqueInput
}

input TechnologyCreateOneWithoutUserTechnologiesInput {
  connect: TechnologyWhereUniqueInput
}

input TechnologyLessonListRelationFilter {
  every: TechnologyLessonWhereInput
  none: TechnologyLessonWhereInput
  some: TechnologyLessonWhereInput
}

input TechnologyLessonUserListRelationFilter {
  every: TechnologyLessonUserWhereInput
  none: TechnologyLessonUserWhereInput
  some: TechnologyLessonUserWhereInput
}

enum TechnologyLessonUserStatus {
  Accepted
  Completed
}

input TechnologyLessonUserWhereInput {
  AND: [TechnologyLessonUserWhereInput!]
  CreatedBy: StringFilter
  Lesson: StringFilter
  NOT: [TechnologyLessonUserWhereInput!]
  OR: [TechnologyLessonUserWhereInput!]
  TechnologyLesson: TechnologyLessonWhereInput
  User: UserWhereInput
  completedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  status: EnumTechnologyLessonUserStatusFilter
  updatedAt: DateTimeFilter
}

input TechnologyLessonWhereInput {
  AND: [TechnologyLessonWhereInput!]
  Comments: CommentListRelationFilter
  CreatedBy: StringFilter
  NOT: [TechnologyLessonWhereInput!]
  OR: [TechnologyLessonWhereInput!]
  Technology: StringFilter
  TechnologyLessonUsers: TechnologyLessonUserListRelationFilter
  Technology_TechnologyToTechnologyLesson: TechnologyWhereInput
  User: UserWhereInput
  components: JsonNullableFilter
  contentText: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
}

input TechnologyListRelationFilter {
  every: TechnologyWhereInput
  none: TechnologyWhereInput
  some: TechnologyWhereInput
}

input TechnologyOrderByInput {
  CreatedBy: SortOrder
  components: SortOrder
  contentText: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  level1hours: SortOrder
  level2hours: SortOrder
  level3hours: SortOrder
  level4hours: SortOrder
  level5hours: SortOrder
  name: SortOrder
  site_url: SortOrder
  updatedAt: SortOrder
}

input TechnologyUpdateInput {
  components: EditorComponentObject
  description: String
  level1hours: Int
  level2hours: Int
  level3hours: Int
  level4hours: Int
  level5hours: Int
  name: String
  site_url: String
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  CreatedBy: StringFilter
  LearnStrategyStages: LearnStrategyStageListRelationFilter
  NOT: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  TaskTechnologies: TaskTechnologyListRelationFilter
  TechnologyLessons: TechnologyLessonListRelationFilter
  User: UserWhereInput
  UserTechnologies: UserTechnologyListRelationFilter
  components: JsonNullableFilter
  contentText: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  level1hours: IntNullableFilter
  level2hours: IntNullableFilter
  level3hours: IntNullableFilter
  level4hours: IntNullableFilter
  level5hours: IntNullableFilter
  name: StringFilter
  site_url: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TechnologyWhereUniqueInput {
  id: String
  name: String
}

input TemplateListRelationFilter {
  every: TemplateWhereInput
  none: TemplateWhereInput
  some: TemplateWhereInput
}

input TemplateWhereInput {
  AND: [TemplateWhereInput!]
  CreatedBy: StringFilter
  NOT: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  Parent: StringNullableFilter
  PrismaProject: StringNullableFilter
  Project: StringNullableFilter
  Project_ProjectToTemplate_PrismaProject: ProjectWhereInput
  Project_ProjectToTemplate_Project: ProjectWhereInput
  Template: TemplateWhereInput
  User: UserWhereInput
  component: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  externalKey: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  other_Templates: TemplateListRelationFilter
  rank: IntNullableFilter
  updatedAt: DateTimeFilter
  vars: JsonNullableFilter
}

type Timer {
  CreatedBy: User
  Task: Task
  createdAt: DateTime!
  id: ID!
  stopedAt: DateTime
  updatedAt: DateTime!
}

input TimerCreateInput {
  Task: TaskCreateOneWithoutTimersInput
  stopedAt: DateTime
}

input TimerListRelationFilter {
  every: TimerWhereInput
  none: TimerWhereInput
  some: TimerWhereInput
}

input TimerOrderByInput {
  CreatedBy: SortOrder
  Task: SortOrder
  createdAt: SortOrder
  id: SortOrder
  stopedAt: SortOrder
  updatedAt: SortOrder
}

type TimerResponse {
  data: Timer
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input TimerUpdateInput {
  stopedAt: DateTime
}

input TimerUpdateManyDataInput {
  stopedAt: DateTime
}

input TimerUpdateManyWithWhereNestedInput {
  data: TimerUpdateManyDataInput!
  where: TimerWhereInput!
}

input TimerUpdateManyWithoutTaskInput {
  updateMany: [TimerUpdateManyWithWhereNestedInput!]
}

input TimerWhereInput {
  AND: [TimerWhereInput!]
  CreatedBy: StringNullableFilter
  NOT: [TimerWhereInput!]
  OR: [TimerWhereInput!]
  Task: StringNullableFilter
  Task_TaskToTimer: TaskWhereInput
  User: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  stopedAt: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input TimerWhereUniqueInput {
  id: String
}

input TokenListRelationFilter {
  every: TokenWhereInput
  none: TokenWhereInput
  some: TokenWhereInput
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  User: UserWhereInput
  createdAt: DateTimeFilter
  expiredAt: DateTimeNullableFilter
  id: StringFilter
  userId: StringNullableFilter
}

input TopicCreateInput {
  CodeChallenge: CodeChallengeCreateOneWithoutTopicInput
  blogID: ID
  components: JSON
  id: ID
  name: String = ""
  uri: String
}

input TopicUpdateInput {
  components: JSON
  content: JSON
  longtitle: String
  name: String
}

input TournamentGroupListRelationFilter {
  every: TournamentGroupWhereInput
  none: TournamentGroupWhereInput
  some: TournamentGroupWhereInput
}

input TournamentGroupWhereInput {
  AND: [TournamentGroupWhereInput!]
  CreatedBy: StringFilter
  NOT: [TournamentGroupWhereInput!]
  OR: [TournamentGroupWhereInput!]
  Tournaments: TournamentListRelationFilter
  User: UserWhereInput
  code: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TournamentListRelationFilter {
  every: TournamentWhereInput
  none: TournamentWhereInput
  some: TournamentWhereInput
}

input TournamentWhereInput {
  AND: [TournamentWhereInput!]
  CreatedBy: StringFilter
  Group: StringNullableFilter
  NOT: [TournamentWhereInput!]
  OR: [TournamentWhereInput!]
  TournamentGroup: TournamentGroupWhereInput
  Tourneys: TourneyListRelationFilter
  User: UserWhereInput
  code: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TourneyListRelationFilter {
  every: TourneyWhereInput
  none: TourneyWhereInput
  some: TourneyWhereInput
}

input TourneyPlayerListRelationFilter {
  every: TourneyPlayerWhereInput
  none: TourneyPlayerWhereInput
  some: TourneyPlayerWhereInput
}

input TourneyPlayerWhereInput {
  AND: [TourneyPlayerWhereInput!]
  NOT: [TourneyPlayerWhereInput!]
  OR: [TourneyPlayerWhereInput!]
  Tourney: StringNullableFilter
  Tourney_TourneyToTourneyPlayer: TourneyWhereInput
  User: StringNullableFilter
  User_TourneyPlayerToUser: UserWhereInput
  id: StringFilter
}

input TourneyWhereInput {
  AND: [TourneyWhereInput!]
  CreatedBy: StringFilter
  Games: GameListRelationFilter
  NOT: [TourneyWhereInput!]
  OR: [TourneyWhereInput!]
  Tournament: StringNullableFilter
  Tournament_TournamentToTourney: TournamentWhereInput
  TourneyPlayers: TourneyPlayerListRelationFilter
  User: UserWhereInput
  code: StringNullableFilter
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  date_till: DateTimeNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

"""
desc
"""
scalar Upload

"""
Пользователь
"""
type User {
  CodeChallengeCompletions: [CodeChallengeCompletion!]
  EthAccounts: [EthAccount!]

  """
  Список менти пользователя
  """
  MentorMenteeMentees: [MentorMentee!]

  """
  Список менторов пользователя
  """
  MentorMenteeMentors: [MentorMentee!]
  NotificationTypes: [NotificationType!]

  """
  Проекты, в которых участвует пользователь
  """
  Projects: [ProjectMember!]

  """
  Проекты, созданные пользователем
  """
  ProjectsCreated: [Project!]
  Timers(first: Int, where: TimerWhereInput): [Timer!]
  UserTechnologies: [UserTechnology!]
  about: EditorComponentObject
  acceptChatMessageAnonymous: Boolean
  acceptNewChatRoom: Boolean
  acceptNewChatRoomAnonymous: Boolean
  activated: Boolean

  """
  Активирован ли пользователь
  """
  active: Boolean
  address: String

  """
  Заблокирован ли пользователь
  """
  blocked: Boolean!

  """
  Когда создан
  """
  createdAt: DateTime!
  deleted: Boolean
  email: String
  fullname: String
  hasEmail: Boolean
  hasPhone: Boolean
  id: String!

  """
  Avatar
  """
  image: String

  """
  Готов быть ментором
  """
  isMentor: Boolean
  phone: String

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean
  showPhone: Boolean
  sudo: Boolean
  technologyLevel: UserTechnologyLevel

  """
  Аккаунт в телеграм
  """
  telegram: String

  """
  Когда обновлен
  """
  updatedAt: DateTime!
  username: String
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
}

input UserGroupListRelationFilter {
  every: UserGroupWhereInput
  none: UserGroupWhereInput
  some: UserGroupWhereInput
}

input UserGroupWhereInput {
  AND: [UserGroupWhereInput!]
  NOT: [UserGroupWhereInput!]
  OR: [UserGroupWhereInput!]
  Users: UserListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type UserLearnStrategy {
  CreatedBy: User
  LearnStrategy: LearnStrategy
  createdAt: DateTime!
  createdById: String
  id: ID!
  learnStrategyId: String
  updatedAt: DateTime!
}

input UserLearnStrategyCreateInput {
  LearnStrategy: LearnStrategyWhereUniqueInput!
}

input UserLearnStrategyCreatedByIdLearnStrategyIdCompoundUniqueInput {
  createdById: String!
  learnStrategyId: String!
}

input UserLearnStrategyListRelationFilter {
  every: UserLearnStrategyWhereInput
  none: UserLearnStrategyWhereInput
  some: UserLearnStrategyWhereInput
}

input UserLearnStrategyOrderByInput {
  createdAt: SortOrder
  createdById: SortOrder
  id: SortOrder
  learnStrategyId: SortOrder
  updatedAt: SortOrder
}

input UserLearnStrategyWhereInput {
  AND: [UserLearnStrategyWhereInput!]
  CreatedBy: UserWhereInput
  LearnStrategy: LearnStrategyWhereInput
  NOT: [UserLearnStrategyWhereInput!]
  OR: [UserLearnStrategyWhereInput!]
  createdAt: DateTimeFilter
  createdById: StringFilter
  id: StringFilter
  learnStrategyId: StringFilter
  updatedAt: DateTimeFilter
}

input UserLearnStrategyWhereUniqueInput {
  createdById_learnStrategyId: UserLearnStrategyCreatedByIdLearnStrategyIdCompoundUniqueInput
  id: String
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  CreatedBy: SortOrder
  EthAccountAuthed: SortOrder
  about: SortOrder
  acceptChatMessageAnonymous: SortOrder
  acceptNewChatRoom: SortOrder
  acceptNewChatRoomAnonymous: SortOrder
  activated: SortOrder
  active: SortOrder
  address: SortOrder
  blocked: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  email: SortOrder
  fullname: SortOrder
  hidden: SortOrder
  id: SortOrder
  image: SortOrder
  isMentor: SortOrder
  marketplaceToken: SortOrder
  oldID: SortOrder
  password: SortOrder
  phone: SortOrder
  showEmail: SortOrder
  showFullname: SortOrder
  showPhone: SortOrder
  sudo: SortOrder
  technologyLevel: SortOrder
  telegram: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type UserResponse {
  data: User
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

input UserSigninDataInput {
  password: String
}

input UserSignupDataInput {
  email: String
  fullname: String
  password: String
  phone: String

  """
  Показывать емейл другим пользователям
  """
  showEmail: Boolean! = false

  """
  Показывать ФИО другим пользователям
  """
  showFullname: Boolean! = true
  username: String
}

type UserTechnology {
  CreatedBy: User
  Technology: Technology
  components: JSON
  createdAt: DateTime!
  date_from: DateTime
  date_till: DateTime
  hiring_status: UserTechnologyHiringStatus
  id: ID!

  """
  Готов быть ментором
  """
  isMentor: Boolean
  level: UserTechnologyLevel
  status: UserTechnologyStatus
  technologyId: String!
  updatedAt: DateTime!
}

input UserTechnologyCreateInput {
  Technology: TechnologyCreateOneWithoutUserTechnologiesInput!
}

input UserTechnologyCreatedByTechnologyCompoundUniqueInput {
  CreatedBy: String!
  Technology: String!
}

"""
Готов ли принимать заказы с таким технологиями
"""
enum UserTechnologyHiringStatus {
  """
  Очень интересно
  """
  Active

  """
  Отрицательно
  """
  Negative

  """
  Малоинтересно
  """
  Neutral
}

"""
UserTechnologyLevel from 1 to 5
"""
scalar UserTechnologyLevel

input UserTechnologyListRelationFilter {
  every: UserTechnologyWhereInput
  none: UserTechnologyWhereInput
  some: UserTechnologyWhereInput
}

input UserTechnologyOrderByInput {
  CreatedBy: SortOrder
  Technology: SortOrder
  components: SortOrder
  createdAt: SortOrder
  date_from: SortOrder
  date_till: SortOrder
  hiring_status: SortOrder
  id: SortOrder
  isMentor: SortOrder
  level: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type UserTechnologyResponse {
  data: UserTechnology
  errors: [RequestError!]!
  message: String!
  success: Boolean!
}

enum UserTechnologyStatus {
  """
  Активно использую
  """
  ActiveUse

  """
  Больше не использую
  """
  NoLongerUse

  """
  Планирую изучать
  """
  PlanToStudy

  """
  Иногда использую
  """
  RarelyUse

  """
  Отказался изучать
  """
  RefusedToStudy

  """
  Изучаю
  """
  Study
}

input UserTechnologyUpdateInput {
  components: UserTechnologyLevel
  date_from: DateTime
  date_till: DateTime
  hiring_status: UserTechnologyHiringStatus

  """
  Готов быть ментором
  """
  isMentor: Boolean
  level: UserTechnologyLevel
  status: UserTechnologyStatus
}

input UserTechnologyWhereInput {
  AND: [UserTechnologyWhereInput!]
  CreatedBy: StringFilter
  NOT: [UserTechnologyWhereInput!]
  OR: [UserTechnologyWhereInput!]
  Technology: StringFilter
  Technology_TechnologyToUserTechnology: TechnologyWhereInput
  User: UserWhereInput
  components: JsonNullableFilter
  createdAt: DateTimeFilter
  date_from: DateTimeNullableFilter
  date_till: DateTimeNullableFilter
  hiring_status: EnumUserTechnologyHiringStatusNullableFilter
  id: StringFilter
  isMentor: BoolFilter
  level: IntNullableFilter
  status: EnumUserTechnologyStatusNullableFilter
  updatedAt: DateTimeFilter
}

input UserTechnologyWhereUniqueInput {
  CreatedBy_Technology: UserTechnologyCreatedByTechnologyCompoundUniqueInput
  id: String
}

input UserUpdateInput {
  NotificationTypes: NotificationType_UserNotificationTypes_UpdateInput
  about: EditorComponentObject
  acceptChatMessageAnonymous: Boolean
  acceptNewChatRoom: Boolean
  acceptNewChatRoomAnonymous: Boolean
  address: String
  email: String
  fullname: String
  image: String

  """
  Готов быть ментором
  """
  isMentor: Boolean
  password: String
  phone: String
  technologyLevel: UserTechnologyLevel
  telegram: String
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  CallRequests_CallRequest_CalledToUser: CallRequestListRelationFilter
  CallRequests_CallRequest_CallerToUser: CallRequestListRelationFilter
  Careers: CareerListRelationFilter
  ChatMessages: ChatMessageListRelationFilter
  ChatMessagesReaded: ChatMessageReadedListRelationFilter
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser: ChatRoomInvitationListRelationFilter
  ChatRoomInvitations_ChatRoomInvitation_UserToUser: ChatRoomInvitationListRelationFilter
  ChatRooms_ChatRoomToUser: ChatRoomListRelationFilter
  ChatRooms_ChatRoomsMembers: ChatRoomListRelationFilter
  CodeChallengeBlocks: CodeChallengeBlockListRelationFilter
  CodeChallengeCompletions: CodeChallengeCompletionListRelationFilter
  CodeChallenges: CodeChallengeListRelationFilter
  Comments: CommentListRelationFilter
  CreatedBy: StringNullableFilter
  EthAccountAuthed: StringNullableFilter
  EthAccount_EthAccountToUser_EthAccountAuthed: EthAccountWhereInput
  EthAccounts_EthAccount_CreatedByToUser: EthAccountListRelationFilter
  EthContractSources: EthContractSourceListRelationFilter
  Files: FileListRelationFilter
  Galleries: GalleryListRelationFilter
  GameResults_GameResult_CreatedByToUser: GameResultListRelationFilter
  GameResults_GameResult_UserToUser: GameResultListRelationFilter
  Games_GameToUser: GameListRelationFilter
  Games_GameUsers: GameListRelationFilter
  Imports: ImportListRelationFilter
  LearnStrategies: LearnStrategyListRelationFilter
  Letters: LetterListRelationFilter
  LogedIns: LogedInListRelationFilter
  MentorMenteeMentees: MentorMenteeListRelationFilter
  MentorMenteeMentors: MentorMenteeListRelationFilter
  NOT: [UserWhereInput!]
  Notices_Notice_CreatedByToUser: NoticeListRelationFilter
  Notices_Notice_UserToUser: NoticeListRelationFilter
  NotificationTypes_NotificationTypeToUser: NotificationTypeListRelationFilter
  NotificationTypes_UserNotificationTypes: NotificationTypeListRelationFilter
  OR: [UserWhereInput!]
  Players: PlayerListRelationFilter
  Positions_PositionToUser: PositionListRelationFilter
  Positions_PositionUsers: PositionListRelationFilter
  ProjectMembers_ProjectMember_CreatedByToUser: ProjectMemberListRelationFilter
  ProjectMembers_ProjectMember_UserToUser: ProjectMemberListRelationFilter
  ProjectTasks: ProjectTaskListRelationFilter
  Projects_PrismaProjectUsers: ProjectListRelationFilter
  Projects_ProjectToUser: ProjectListRelationFilter
  ResetPasswords: ResetPasswordListRelationFilter
  ResourceTags: ResourceTagListRelationFilter
  Resources: ResourceListRelationFilter
  Routes: RouteListRelationFilter
  ServiceCategories: ServiceCategoryListRelationFilter
  Services: ServiceListRelationFilter
  Settings: SettingsListRelationFilter
  SmsMessages: SmsMessageListRelationFilter
  SmsProviders: SmsProviderListRelationFilter
  Tags: TagListRelationFilter
  TaskMembers_TaskMember_CreatedByToUser: TaskMemberListRelationFilter
  TaskMembers_TaskMember_UserToUser: TaskMemberListRelationFilter
  TaskReactions: TaskReactionListRelationFilter
  TaskTechnologies: TaskTechnologyListRelationFilter
  Tasks: TaskListRelationFilter
  TeamMembers_TeamMember_CreatedByToUser: TeamMemberListRelationFilter
  TeamMembers_TeamMember_UserToUser: TeamMemberListRelationFilter
  Teams: TeamListRelationFilter
  Technologies: TechnologyListRelationFilter
  TechnologyLessonUsers: TechnologyLessonUserListRelationFilter
  TechnologyLessons: TechnologyLessonListRelationFilter
  Templates: TemplateListRelationFilter
  Timers: TimerListRelationFilter
  Tokens: TokenListRelationFilter
  TournamentGroups: TournamentGroupListRelationFilter
  Tournaments: TournamentListRelationFilter
  TourneyPlayers: TourneyPlayerListRelationFilter
  Tourneys: TourneyListRelationFilter
  User: UserWhereInput
  UserGroups: UserGroupListRelationFilter
  UserLearnStrategies: UserLearnStrategyListRelationFilter
  UserTechnologies: UserTechnologyListRelationFilter
  Votes: VoteListRelationFilter
  Worlds: WorldListRelationFilter
  about: JsonNullableFilter
  acceptChatMessageAnonymous: BoolNullableFilter
  acceptNewChatRoom: BoolNullableFilter
  acceptNewChatRoomAnonymous: BoolNullableFilter
  activated: BoolNullableFilter
  active: BoolNullableFilter
  address: StringNullableFilter
  blocked: BoolFilter
  createdAt: DateTimeFilter
  deleted: BoolNullableFilter
  email: StringNullableFilter
  fullname: StringNullableFilter
  hidden: BoolNullableFilter
  id: StringFilter
  image: StringNullableFilter
  isMentor: BoolFilter
  marketplaceToken: StringNullableFilter
  oldID: IntNullableFilter
  other_Users: UserListRelationFilter
  password: StringNullableFilter
  phone: StringNullableFilter
  showEmail: BoolFilter
  showFullname: BoolFilter
  showPhone: BoolFilter
  sudo: BoolNullableFilter
  technologyLevel: IntNullableFilter
  telegram: StringNullableFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  oldID: Int
  username: String
}

input VoteListRelationFilter {
  every: VoteWhereInput
  none: VoteWhereInput
  some: VoteWhereInput
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  Resource: StringNullableFilter
  Resource_ResourceToVote: ResourceWhereInput
  User: StringFilter
  User_UserToVote: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  value: DecimalFilter
}

input WorldListRelationFilter {
  every: WorldWhereInput
  none: WorldWhereInput
  some: WorldWhereInput
}

enum WorldType {
  DEFAULT
  SUPERFLAT
}

input WorldWhereInput {
  AND: [WorldWhereInput!]
  Blocks: BlockListRelationFilter
  CreatedBy: StringFilter
  Messages: MessageListRelationFilter
  NOT: [WorldWhereInput!]
  OR: [WorldWhereInput!]
  Players: PlayerListRelationFilter
  User: UserWhereInput
  createdAt: DateTimeFilter
  days: IntFilter
  id: StringFilter
  lastPlayed: DateTimeFilter
  name: StringFilter
  seed: StringFilter
  time: DecimalFilter
  timeChanger: DecimalNullableFilter
  type: EnumWorldTypeFilter
  updatedAt: DateTimeFilter
}
