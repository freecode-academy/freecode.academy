query me(
  $withMentorMentee: Boolean = true
  $withNotificationTypes: Boolean = true
  $withUserTechnologies: Boolean = true
  $withCodeChallengeCompletions: Boolean = true
  $withEducationProjects: Boolean = false
) {
  me {
    ...meUser
  }
}

query user(
  $where: UserWhereUniqueInput!
  $withMentorMentee: Boolean = true
  $withNotificationTypes: Boolean = true
  $withUserTechnologies: Boolean = true
  $withCodeChallengeCompletions: Boolean = false
  $withEducationProjects: Boolean = false
) {
  object: user(where: $where) {
    ...userProfile
  }
}

query usersConnection(
  $where: UserWhereInput
  $orderBy: [UserOrderByInput!] = { createdAt: asc }
  $skip: Int
  # $after: String
  # $before: String
  $first: Int = 10 # $last: Int
) {
  usersCount(where: $where)
  users(
    where: $where
    orderBy: $orderBy
    skip: $skip
    # after: $after
    # before: $before
    take: $first # last: $last
  ) {
    ...usersConnectionUser
  }
}

mutation updateUserProcessor(
  $data: UserUpdateInput!
  $withMentorMentee: Boolean = false
  $withNotificationTypes: Boolean = true
  $withUserTechnologies: Boolean = false
  $withCodeChallengeCompletions: Boolean = false
  $withEducationProjects: Boolean = false
) {
  updateUserProcessor(data: $data) {
    success
    message
    errors {
      key
      message
    }
    data {
      ...userProfile
    }
  }
}

mutation signup($data: UserSignupDataInput!) {
  response: signup(data: $data) {
    success
    message
    errors {
      key
      message
    }
    token
    data {
      ...UserNoNesting
    }
  }
}

fragment MeUserTimer on Timer {
  id
  createdAt
  stopedAt
  Task {
    id
    name
    status
    TaskProjects {
      id
      createdAt
      updatedAt
      Project {
        id
        type
        name
      }
    }
  }
}

mutation blockUser($where: UserWhereUniqueInput!) {
  blockUser(where: $where) {
    ...user_
  }
}

mutation unblockUser($where: UserWhereUniqueInput!) {
  unblockUser(where: $where) {
    ...user_
  }
}

mutation updateCurrentUser($data: CurrentUserUpdateInput!) {
  updateCurrentUser(data: $data) {
    ...user_
  }
}

fragment UserNoNesting on User {
  id
  createdAt
  updatedAt
  username
  email
  phone
  showEmail
  showPhone
  showFullname
  # password
  fullname
  image
  address
  sudo
  activated
  deleted
  hasEmail
  hasPhone
  # marketplaceToken
  # hidden
  acceptChatMessageAnonymous
  acceptNewChatRoomAnonymous
  acceptNewChatRoom
  technologyLevel
  isMentor
  telegram
  active
  blocked
}

fragment meUser on User {
  ...userProfile
  # EthAccounts {
  #   id
  #   address
  #   balance(convert: ether)
  # }
  Timers(first: 1, where: { stopedAt: null }) {
    ...MeUserTimer
  }
}

fragment user_ on User {
  ...UserNoNesting
  EthAccounts {
    ...EthAccountNoNesting
  }
  # Projects {
  #   ...ProjectMemberNoNesting
  #   Project {
  #     ...ProjectNoNesting
  #     Resource {
  #       ...ResourceNoNesting
  #     }
  #   }
  # }
  # ProjectsCreated {
  #   ...ProjectNoNesting
  #   Resource {
  #     ...ResourceNoNesting
  #   }
  # }
}

# Полный объект с набором различных данных
fragment userProfile on User {
  MentorMenteeMentors @include(if: $withMentorMentee) {
    ...MentorMenteeNoNesting
    Mentor {
      ...UserNoNesting
    }
    Mentee {
      ...UserNoNesting
    }
  }
  MentorMenteeMentees @include(if: $withMentorMentee) {
    ...MentorMenteeNoNesting
    Mentor {
      ...UserNoNesting
    }
    Mentee {
      ...UserNoNesting
    }
  }
  about
  NotificationTypes @include(if: $withNotificationTypes) {
    ...NotificationTypeNoNesting
  }
  UserTechnologies @include(if: $withUserTechnologies) {
    ...technology_UserTechnology
    Technology {
      ...TechnologyNoNesting
    }
  }
  CodeChallengeCompletions @include(if: $withCodeChallengeCompletions) {
    ...MeUserCodeChallengeCompletion
  }

  EducationProjects: ProjectsCreated(
    take: 1
    where: { type: { equals: Education } }
  ) @include(if: $withEducationProjects) {
    id
    name
    type
  }

  ...user_
}

fragment EthAccountNoNesting on EthAccount {
  id
  createdAt
  updatedAt
  name
  description
  address
  type
  source
  bytecode
  abi
  balance
}

fragment NotificationTypeNoNesting on NotificationType {
  id
  createdAt
  updatedAt
  name
  code
  comment
  oldID
}

fragment ProjectMemberNoNesting on ProjectMember {
  id
  createdAt
  updatedAt
  status
}

fragment MeUserCodeChallengeCompletion on CodeChallengeCompletion {
  id
  Task {
    id
    status
  }
  CodeChallenge {
    id
  }
}

fragment usersConnectionUser on User {
  ...UserNoNesting
  EthAccounts {
    id
    createdAt
    updatedAt
    name
    description
    address
    type
    source
    bytecode
    abi
    balance
  }
  NotificationTypes {
    id
    createdAt
    updatedAt
    name
    code
    comment
    oldID
  }
  Projects {
    id
    createdAt
    updatedAt
    status
    Project {
      ...usersConnectionProject
      Resource {
        ...usersConnectionResource
      }
    }
  }
  ProjectsCreated {
    ...usersConnectionProject
    Resource {
      ...usersConnectionResource
    }
  }
}

fragment usersConnectionProject on Project {
  id
  name
  domain
  createdAt
  updatedAt
  description
  url
  sequence
  content
  contentText
  status
  public
  oldID
}

fragment usersConnectionResource on Resource {
  id
  createdAt
  updatedAt
  type
  name
  longtitle
  content
  components
  contentText
  published
  deleted
  hidemenu
  searchable
  uri
  isfolder
  rating
  positiveVotesCount
  negativeVotesCount
  neutralVotesCount
  oldID
  commentOldID
  class_key
  template
  mockUpdate
}
